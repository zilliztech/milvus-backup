syntax = "proto3";
package milvus.proto.backup;

option go_package="github.com/zilliztech/milvus-backup/core/proto/backuppb";

import "schema.proto";
import "common.proto";

service MilvusBackupService {
  // Create backup
  rpc CreateBackup(CreateBackupRequest) returns (BackupInfoResponse) {}
  // Get backup with the chosen name
  rpc GetBackup(GetBackupRequest) returns (BackupInfoResponse) {}
  // List backups that contains the given collection name, if collection is not given, return all backups in the cluster
  rpc ListBackups(ListBackupsRequest) returns (ListBackupsResponse) {}
  // Delete backup by given backup name
  rpc DeleteBackup(DeleteBackupRequest) returns (DeleteBackupResponse) {}
  // Load backup to milvus, return backup load report
  rpc LoadBackup(LoadBackupRequest) returns (LoadBackupResponse) {}

  rpc GetLoadBackupState(GetLoadBackupStateRequest) returns (LoadBackupResponse) {}

  // Copy backup between buckets
  // temporary interface since currently milvus BulkInsert doesn't support read data from other bucket
  // rpc CopyBackup(CopyBackupRequest) returns (CopyBackupResponse) {}
 }

enum MsgType {
  Undefined = 0;
  CreateBackup = 100;
  GetBackup = 101;
  ListBackups = 102;
  DeleteBackup = 103;
  LoadBackup = 104;
}

message MsgBase {
  MsgType msg_type = 1;
  int64  msgID = 2;
  uint64 timestamp = 3;
}

enum StatusCode {
  Unknown = 0;
  Success = 1;
  UnexpectedError = 2;
  ConnectFailed = 3;
  PermissionDenied = 4;
}

message Status {
  StatusCode status_code = 1;
  string reason = 2;
}

/**
 * lite version of Collection info
 */
message CollectionBackupInfo {
  BackupTaskState backup_state = 1;
  int64 collection_id = 2;
  string db_name = 3;
  string collection_name = 4;
  schema.CollectionSchema schema = 5;
  int32 shards_num = 6;
  common.ConsistencyLevel consistency_level = 7;
  // array of partition backup
  repeated PartitionBackupInfo partition_backups = 8;
  uint64 backup_timestamp = 9;
}

message PartitionBackupInfo {
  int64 partition_id = 1;
  string partition_name = 2;
  int64 collection_id = 3;
  // array of segment backup
  repeated SegmentBackupInfo segment_backups = 7;
}

/**
 * lite version of datapb.SegmentInfo
 */
message SegmentBackupInfo {
  int64 segment_id = 1;
  int64 collection_id = 2;
  int64 partition_id = 3;
  int64 num_of_rows = 4;
  repeated FieldBinlog binlogs = 5;
  repeated FieldBinlog statslogs = 6;
  repeated FieldBinlog deltalogs = 7;
}

/**
 * root of backup
 */
message BackupInfo {
  BackupTaskState backup_state = 1;
  string name = 2;
  // backup timestamp
  uint64 backup_timestamp = 3;
  // array of collection backup
  repeated CollectionBackupInfo collection_backups = 4;
}

/**
 * For level storage
 */
message CollectionLevelBackupInfo {
  repeated CollectionBackupInfo infos = 1;
}

/**
 * For level storage
 */
message PartitionLevelBackupInfo {
  repeated PartitionBackupInfo infos = 1;
}

/**
 * For level storage
 */
message SegmentLevelBackupInfo {
  repeated SegmentBackupInfo infos = 1;
}

/**
 * Create Backup in milvus
 */
message CreateBackupRequest {
  MsgBase base = 1;
  // backup name, if not set, will generate one
  string backup_name = 2;
  // collection names to backup, empty to backup all
  repeated string collection_names = 3;
}

/**
 * BackupInfoResponse
 */
message BackupInfoResponse {
  Status status = 1;
  BackupInfo backup_info = 2;
}

message GetBackupRequest {
  MsgBase base = 1;
  string backup_name = 2;
}

message ListBackupsRequest {
  MsgBase base = 1;
  string collection_name = 2;
}

message ListBackupsResponse {
  Status status = 1;
  repeated BackupInfo backup_infos = 2;
  repeated string failBackups = 3;
}

message DeleteBackupRequest {
  MsgBase base = 1;
  string backup_name = 2;
}

message DeleteBackupResponse {
  Status status = 1;
}

enum BackupTaskStateCode {
  BACKUP_INITIAL = 0;
  BACKUP_EXECUTING = 1;
  BACKUP_SUCCESS = 2;
  BACKUP_FAIL = 3;
  BACKUP_TIMEOUT = 4;
}

message BackupTaskState {
  int64 id = 1;
  BackupTaskStateCode code = 2;
  string errorMessage = 3;
  int64 start_time = 4;
  int64 end_time = 5;
  int32 progress = 6;
}

enum LoadTaskStateCode {
  LOAD_INITIAL = 0;
  LOAD_EXECUTING = 1;
  LOAD_SUCCESS = 2;
  LOAD_FAIL = 3;
  LOAD_TIMEOUT = 4;
}

message LoadTaskState {
  int64 id = 1;
  LoadTaskStateCode code = 2;
  string errorMessage = 3;
  int64 start_time = 4;
  int64 end_time = 5;
  int32 progress = 6;
}

message LoadPartitionTask {
  LoadTaskState load_state = 1;
  PartitionBackupInfo part_backup = 2;
}

message LoadCollectionTask {
  LoadTaskState load_state = 1;
  CollectionBackupInfo coll_backup = 2;
  string target_collection_name = 3;
  repeated LoadPartitionTask partition_load_tasks = 4;
}

message LoadBackupRequest {
  MsgBase base = 1;
  string backup_name = 2;
  repeated string collection_names = 3;
  // Support two ways to rename the collections while recover
  // 1, set a suffix
  string collection_suffix = 4;
  // 2, give a map to rename the collections, if not given, use the original name
  map<string, string> collection_renames = 5;
}

message LoadBackupResponse {
  Status status = 1;
  LoadTaskState load_state = 2;
  BackupInfo backup_info = 3;
  repeated LoadCollectionTask collection_load_tasks = 4;
}
//
//enum CopyType {
//  Milvus2Backup = 0;
//  Backup2Milvus = 1;
//}
//
//message CopyBackupRequest {
//  MsgBase base = 1;
//  string backup_name = 2;
//  CopyType copy_type = 3;
//}
//
//message CopyBackupResponse {
//  Status status = 1;
//}

message GetLoadBackupStateRequest {
  MsgBase base = 1;
  int64 id = 2;
}

// copied from milvus data_coord.proto
message FieldBinlog{
  int64 fieldID = 1;
  repeated Binlog binlogs = 2;
}

message Binlog {
  int64 entries_num = 1;
  uint64 timestamp_from = 2;
  uint64 timestamp_to = 3;
  string log_path = 4;
  int64 log_size = 5;
}