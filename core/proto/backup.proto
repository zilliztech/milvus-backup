syntax = "proto3";
package milvus.proto.backup;

option go_package="github.com/zilliztech/milvus-backup/core/proto/backuppb";

service MilvusBackupService {
  // Create backup
  rpc CreateBackup(CreateBackupRequest) returns (BackupInfoResponse) {}
  // Get backup with the chosen name
  rpc GetBackup(GetBackupRequest) returns (BackupInfoResponse) {}
  // List backups that contains the given collection name, if collection is not given, return all backups in the cluster
  rpc ListBackups(ListBackupsRequest) returns (ListBackupsResponse) {}
  // Delete backup by given backup name
  rpc DeleteBackup(DeleteBackupRequest) returns (DeleteBackupResponse) {}
  // Restore backup to milvus, return backup restore report
  rpc RestoreBackup(RestoreBackupRequest) returns (RestoreBackupResponse) {}
  // Get restore state by given id
  rpc GetRestore(GetRestoreStateRequest) returns (RestoreBackupResponse) {}

  // Copy backup between buckets
  // temporary interface since currently milvus BulkInsert doesn't support read data from other bucket
  // rpc CopyBackup(CopyBackupRequest) returns (CopyBackupResponse) {}
 }

enum MsgType {
  Undefined = 0;
  CreateBackup = 100;
  GetBackup = 101;
  ListBackups = 102;
  DeleteBackup = 103;
  RestoreBackup = 104;
  GetRestore = 105;
}

message MsgBase {
  MsgType msg_type = 1;
  int64  msgID = 2;
  uint64 timestamp = 3;
}

enum StatusCode {
  Unknown = 0;
  Success = 1;
  Fail = 2;
  Timeout = 3;
}

message Status {
  StatusCode status_code = 1;
  string reason = 2;
}

/**
 * lite version of Collection info
 */
message CollectionBackupInfo {
  BackupTaskState backup_state = 1;
  int64 collection_id = 2;
  string db_name = 3;
  string collection_name = 4;
  CollectionSchema schema = 5;
  int32 shards_num = 6;
  ConsistencyLevel consistency_level = 7;
  // array of partition backup
  repeated PartitionBackupInfo partition_backups = 8;
  uint64 backup_timestamp = 9;
}

message PartitionBackupInfo {
  int64 partition_id = 1;
  string partition_name = 2;
  int64 collection_id = 3;
  // array of segment backup
  repeated SegmentBackupInfo segment_backups = 7;
}

/**
 * lite version of datapb.SegmentInfo
 */
message SegmentBackupInfo {
  int64 segment_id = 1;
  int64 collection_id = 2;
  int64 partition_id = 3;
  int64 num_of_rows = 4;
  repeated FieldBinlog binlogs = 5;
  repeated FieldBinlog statslogs = 6;
  repeated FieldBinlog deltalogs = 7;
}

/**
 * root of backup
 */
message BackupInfo {
  BackupTaskState backup_state = 1;
  string name = 2;
  // backup timestamp
  uint64 backup_timestamp = 3;
  // array of collection backup
  repeated CollectionBackupInfo collection_backups = 4;
}

/**
 * For level storage
 */
message CollectionLevelBackupInfo {
  repeated CollectionBackupInfo infos = 1;
}

/**
 * For level storage
 */
message PartitionLevelBackupInfo {
  repeated PartitionBackupInfo infos = 1;
}

/**
 * For level storage
 */
message SegmentLevelBackupInfo {
  repeated SegmentBackupInfo infos = 1;
}

/**
 * Create Backup in milvus
 */
message CreateBackupRequest {
  MsgBase base = 1;
  // backup name, if not set, will generate one
  string backup_name = 2;
  // collection names to backup, empty to backup all
  repeated string collection_names = 3;
  bool async = 4;
}

/**
 * BackupInfoResponse
 */
message BackupInfoResponse {
  Status status = 1;
  BackupInfo backup_info = 2;
}

message GetBackupRequest {
  MsgBase base = 1;
  string backup_name = 2;
}

message ListBackupsRequest {
  MsgBase base = 1;
  string collection_name = 2;
}

message ListBackupsResponse {
  Status status = 1;
  repeated BackupInfo backup_infos = 2;
  repeated string failBackups = 3;
}

message DeleteBackupRequest {
  MsgBase base = 1;
  string backup_name = 2;
}

message DeleteBackupResponse {
  Status status = 1;
}

enum BackupTaskStateCode {
  BACKUP_INITIAL = 0;
  BACKUP_EXECUTING = 1;
  BACKUP_SUCCESS = 2;
  BACKUP_FAIL = 3;
  BACKUP_TIMEOUT = 4;
}

message BackupTaskState {
  int64 id = 1;
  BackupTaskStateCode code = 2;
  string errorMessage = 3;
  int64 start_time = 4;
  int64 end_time = 5;
  int32 progress = 6;
}

enum RestoreTaskStateCode {
  INITIAL = 0;
  EXECUTING = 1;
  SUCCESS = 2;
  FAIL = 3;
  TIMEOUT = 4;
}

message RestoreBackupRequest {
  MsgBase base = 1;
  string backup_name = 2;
  repeated string collection_names = 3;
  // Support two ways to rename the collections while recover
  // 1, set a suffix
  string collection_suffix = 4;
  // 2, give a map to rename the collections, if not given, use the original name
  map<string, string> collection_renames = 5;
  bool async = 6;
}

message RestorePartitionTask {
  int64 id = 1;
  RestoreTaskStateCode state_code = 2;
  string errorMessage = 3;
  int64 start_time = 4;
  int64 end_time = 5;
  int32 progress = 6;
  PartitionBackupInfo part_backup = 7;
}

message RestoreCollectionTask {
  int64 id = 1;
  RestoreTaskStateCode state_code = 2;
  string errorMessage = 3;
  int64 start_time = 4;
  int64 end_time = 5;
  int32 progress = 6;
  CollectionBackupInfo coll_backup = 7;
  string target_collection_name = 8;
  repeated RestorePartitionTask partition_restore_tasks = 9;
}

message RestoreBackupTask {
  int64 id = 1;
  RestoreTaskStateCode state_code = 2;
  string errorMessage = 3;
  int64 start_time = 4;
  int64 end_time = 5;
  int32 progress = 6;
  BackupInfo backup_info = 7;
  repeated RestoreCollectionTask collection_restore_tasks = 8;
}

message RestoreBackupResponse {
  Status status = 1;
  RestoreBackupTask task = 2;
}

message GetRestoreStateRequest {
  MsgBase base = 1;
  int64 id = 2;
}

// copied from milvus data_coord.proto
message FieldBinlog{
  int64 fieldID = 1;
  repeated Binlog binlogs = 2;
}

message Binlog {
  int64 entries_num = 1;
  uint64 timestamp_from = 2;
  uint64 timestamp_to = 3;
  string log_path = 4;
  int64 log_size = 5;
}

// copied from milvus common.proto
message KeyValuePair {
  string key = 1;
  string value = 2;
}

enum ConsistencyLevel {
  Strong = 0;
  Session = 1; // default in PyMilvus
  Bounded = 2;
  Eventually = 3;
  Customized = 4; // Users pass their own `guarantee_timestamp`.
}


// copied from milvus schema.proto

/**
 * @brief Field data type
 */
enum DataType {
  None = 0;
  Bool = 1;
  Int8 = 2;
  Int16 = 3;
  Int32 = 4;
  Int64 = 5;

  Float = 10;
  Double = 11;

  String = 20;
  VarChar = 21; // variable-length strings with a specified maximum length

  BinaryVector = 100;
  FloatVector = 101;
}

enum FieldState {
  FieldCreated = 0;
  FieldCreating = 1;
  FieldDropping = 2;
  FieldDropped = 3;
}

/**
 * @brief Field schema
 */
message FieldSchema {
  int64 fieldID = 1;
  string name = 2;
  bool is_primary_key = 3;
  string description = 4;
  DataType data_type = 5;
  repeated KeyValuePair type_params = 6;
  repeated KeyValuePair index_params = 7;
  bool autoID = 8;
  FieldState state = 9; // To keep compatible with older version, the default state is `Created`.
}

/**
 * @brief Collection schema
 */
message CollectionSchema {
  string name = 1;
  string description = 2;
  bool autoID = 3; // deprecated later, keep compatible with c++ part now
  repeated FieldSchema fields = 4;
}