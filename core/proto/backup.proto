syntax = "proto3";
package milvus.proto.backup;

import "google/protobuf/struct.proto";

option go_package="github.com/zilliztech/milvus-backup/core/proto/backuppb";

service MilvusBackupService {
  // Create backup
  rpc CreateBackup(CreateBackupRequest) returns (BackupInfoResponse) {}
  // Get backup with the chosen name
  rpc GetBackup(GetBackupRequest) returns (BackupInfoResponse) {}
  // List backups that contains the given collection name, if collection is not given, return all backups in the cluster
  rpc ListBackups(ListBackupsRequest) returns (ListBackupsResponse) {}
  // Delete backup by given backup name
  rpc DeleteBackup(DeleteBackupRequest) returns (DeleteBackupResponse) {}
  // Restore backup to milvus, return backup restore report
  rpc RestoreBackup(RestoreBackupRequest) returns (RestoreBackupResponse) {}
  // Get restore state by given id
  rpc GetRestore(GetRestoreStateRequest) returns (RestoreBackupResponse) {}
  // Check connections
  rpc Check(CheckRequest) returns (CheckResponse) {}
 }

enum ResponseCode {
  Success = 0;
  Not_Support = 1;
  No_Permission = 2;
  Fail = 3;
  Parameter_Error = 400;
  Request_Object_Not_Found = 404;
}

message IndexInfo {
  string field_name = 1;
  string index_name = 2;
  string index_type = 3;
  map<string, string> params = 4;
}

/**
 * lite version of Collection info
 */
message CollectionBackupInfo {
  string id = 1;
  BackupTaskStateCode state_code = 2;
  string errorMessage = 3;
  int64 start_time = 4;
  int64 end_time = 5;
  int32 progress = 6;
  int64 collection_id = 7;
  string db_name = 8;
  string collection_name = 9;
  CollectionSchema schema = 10;
  int32 shards_num = 11;
  ConsistencyLevel consistency_level = 12;
  repeated PartitionBackupInfo partition_backups = 13;
  // logical time of backup, used for restore
  uint64 backup_timestamp = 14;
  int64 size = 15;
  bool has_index = 16;
  repeated IndexInfo index_infos = 17;
  string load_state = 18;
  // physical unix time of backup 
  uint64 backup_physical_timestamp = 19;
}

message PartitionBackupInfo {
  int64 partition_id = 1;
  string partition_name = 2;
  int64 collection_id = 3;
  // array of segment backup
  repeated SegmentBackupInfo segment_backups = 4;
  int64 size = 5;
  string load_state = 6;
}

/**
 * lite version of datapb.SegmentInfo
 */
message SegmentBackupInfo {
  int64 segment_id = 1;
  int64 collection_id = 2;
  int64 partition_id = 3;
  int64 num_of_rows = 4;
  repeated FieldBinlog binlogs = 5;
  repeated FieldBinlog statslogs = 6;
  repeated FieldBinlog deltalogs = 7;
  int64 size = 8;
  // separate segments into multi groups by size, 
  // segments in one group will be copied into one directory during backup
  // and will bulkinsert in one call during restore
  int64 group_id = 9; 
}

/**
 * root of backup
 */
message BackupInfo {
  string id = 1;
  BackupTaskStateCode state_code = 2;
  string errorMessage = 3;
  int64 start_time = 4;
  int64 end_time = 5;
  int32 progress = 6;
  string name = 7;
  // backup timestamp
  uint64 backup_timestamp = 8;
  // array of collection backup
  repeated CollectionBackupInfo collection_backups = 9;
  int64 size = 10;
  string milvus_version = 11;
}

/**
 * For level storage
 */
message CollectionLevelBackupInfo {
  repeated CollectionBackupInfo infos = 1;
}

/**
 * For level storage
 */
message PartitionLevelBackupInfo {
  repeated PartitionBackupInfo infos = 1;
}

/**
 * For level storage
 */
message SegmentLevelBackupInfo {
  repeated SegmentBackupInfo infos = 1;
}

/**
 * Create Backup in milvus
 */
message CreateBackupRequest {
  // uuid of request, will generate one if not set
  string requestId = 1;
  // backup name, will generate one if not set
  string backup_name = 2;
  // collection names to backup, empty to backup all
  repeated string collection_names = 3;
  // async or not
  bool async = 4;
  // database and collections to backup. A json string. To support database. 2023.7.7
  google.protobuf.Value db_collections = 5;
}

/**
 * BackupInfoResponse
 */
message BackupInfoResponse {
  // uuid of the request to response
  string requestId = 1;
  // response code. 0 means success. others are fail
  ResponseCode code = 2;
  // error msg if fail
  string msg = 3;
  // backup info entity
  BackupInfo data = 4;
}

message GetBackupRequest {
  // uuid of request, will generate one if not set
  string requestId = 1;
  // backup name to query, backup_name or backup_id is needed
  string backup_name = 2;
  // backup to query
  string backup_id = 3;
  // if bucket_name and path is set. will override bucket/path in config.
  string bucket_name = 4;
  // if bucket_name and path is set. will override bucket/path in config.
  string path = 5;
}

message ListBackupsRequest {
  // uuid of request, will generate one if not set
  string requestId = 1;
  // if collection_name is set, will only return backups contains this collection
  string collection_name = 2;
}

message ListBackupsResponse {
  // uuid of the request to response
  string requestId = 1;
  // response code. 0 means success. others are fail
  ResponseCode code = 2;
  // error msg if fail
  string msg = 3;
  // backup info entities
  repeated BackupInfo data = 4;
}

message DeleteBackupRequest {
  // uuid of request, will generate one if not set
  string requestId = 1;
  // backup name
  string backup_name = 2;
}

message DeleteBackupResponse {
  // uuid of the request to response
  string requestId = 1;
  // response code. 0 means success. others are fail
  ResponseCode code = 2;
  // error msg if fail
  string msg = 3;
}

enum BackupTaskStateCode {
  BACKUP_INITIAL = 0;
  BACKUP_EXECUTING = 1;
  BACKUP_SUCCESS = 2;
  BACKUP_FAIL = 3;
  BACKUP_TIMEOUT = 4;
}

enum RestoreTaskStateCode {
  INITIAL = 0;
  EXECUTING = 1;
  SUCCESS = 2;
  FAIL = 3;
  TIMEOUT = 4;
}

message RestoreBackupRequest {
  // uuid of request, will generate one if not set
  string requestId = 1;
  // backup name to restore
  string backup_name = 2;
  // collections to restore
  repeated string collection_names = 3;
  // Support two ways to rename the collections while recover
  // 1, set a suffix
  string collection_suffix = 4;
  // 2, give a map to rename the collections, if not given, use the original name.
  // collection_renames has higher priority than collection_suffix
  map<string, string> collection_renames = 5;
  // execute asynchronously or not
  bool async = 6;
  // if bucket_name and path is set. will override bucket/path in config.
  string bucket_name = 7;
  // if bucket_name and path is set. will override bucket/path in config.
  string path = 8;
  // database and collections to restore. A json string. To support database. 2023.7.7
  google.protobuf.Value db_collections = 9;
}

message RestorePartitionTask {
  string id = 1;
  RestoreTaskStateCode state_code = 2;
  string errorMessage = 3;
  int64 start_time = 4;
  int64 end_time = 5;
  int32 progress = 6;
  PartitionBackupInfo part_backup = 7;
}

message RestoreCollectionTask {
  string id = 1;
  RestoreTaskStateCode state_code = 2;
  string errorMessage = 3;
  int64 start_time = 4;
  int64 end_time = 5;
  CollectionBackupInfo coll_backup = 6;
  string target_collection_name = 7;
  repeated RestorePartitionTask partition_restore_tasks = 8;
  int64 restored_size = 9;
  int64 to_restore_size = 10;
  int32 progress = 11;
  string target_db_name = 12;
}

message RestoreBackupTask {
  string id = 1;
  RestoreTaskStateCode state_code = 2;
  string errorMessage = 3;
  int64 start_time = 4;
  int64 end_time = 5;
  repeated RestoreCollectionTask collection_restore_tasks = 6;
  int64 restored_size = 7;
  int64 to_restore_size = 8;
  int32 progress = 9;
}

message RestoreBackupResponse {
  // uuid of the request to response
  string requestId = 1;
  // response code. 0 means success. others are fail
  ResponseCode code = 2;
  // error msg if fail
  string msg = 3;
  // restore task info entity
  RestoreBackupTask data = 4;
}

message GetRestoreStateRequest {
  // uuid of request, will generate one if not set
  string requestId = 1;
  // restore task id to query
  string id = 2;
}

// copied from milvus data_coord.proto
message FieldBinlog{
  int64 fieldID = 1;
  repeated Binlog binlogs = 2;
}

message Binlog {
  int64 entries_num = 1;
  uint64 timestamp_from = 2;
  uint64 timestamp_to = 3;
  string log_path = 4;
  int64 log_size = 5;
}

// copied from milvus common.proto
message KeyValuePair {
  string key = 1;
  string value = 2;
}

enum ConsistencyLevel {
  Strong = 0;
  Session = 1; // default in PyMilvus
  Bounded = 2;
  Eventually = 3;
  Customized = 4; // Users pass their own `guarantee_timestamp`.
}


// copied from milvus schema.proto

/**
 * @brief Field data type
 */
enum DataType {
  None = 0;
  Bool = 1;
  Int8 = 2;
  Int16 = 3;
  Int32 = 4;
  Int64 = 5;

  Float = 10;
  Double = 11;

  String = 20;
  VarChar = 21; // variable-length strings with a specified maximum length

  BinaryVector = 100;
  FloatVector = 101;
}

enum FieldState {
  FieldCreated = 0;
  FieldCreating = 1;
  FieldDropping = 2;
  FieldDropped = 3;
}

message ValueField {
  oneof data {
    bool bool_data = 1;
    int32 int_data = 2;
    int64 long_data = 3;
    float float_data = 4;
    double double_data = 5;
    string string_data = 6;
    bytes bytes_data = 7;
  }
}

/**
 * @brief Field schema. The same as https://github.com/milvus-io/milvus-proto schema.proto
 */
message FieldSchema {
  int64 fieldID = 1;
  string name = 2;
  bool is_primary_key = 3;
  string description = 4;
  DataType data_type = 5;
  repeated KeyValuePair type_params = 6;
  repeated KeyValuePair index_params = 7;
  bool autoID = 8;
  FieldState state = 9; // To keep compatible with older version, the default state is `Created`.
  DataType element_type = 10; // For array type, the element type is stored here
  ValueField default_value = 11; // default_value only support scalars except array and json for now
  bool is_dynamic = 12; // mark whether this field is the dynamic field
  bool is_partition_key = 13; // enable logic partitions
}

/**
 * @brief Collection schema
 */
message CollectionSchema {
  string name = 1;
  string description = 2;
  bool autoID = 3; // deprecated later, keep compatible with c++ part now
  repeated FieldSchema fields = 4;
  bool enable_dynamic_field = 5; // mark whether this table has the dynamic field function enabled.
}

message CheckRequest {
}

message CheckResponse {
  // response code. 0 means success. others are fail
  ResponseCode code = 1;
  // error msg if fail
  string msg = 2;
}
