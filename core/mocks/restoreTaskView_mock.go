// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"time"

	mock "github.com/stretchr/testify/mock"

	"github.com/zilliztech/milvus-backup/core/meta/taskmgr"
	"github.com/zilliztech/milvus-backup/core/namespace"
	"github.com/zilliztech/milvus-backup/core/proto/backuppb"
)

// NewMockRestoreTaskView creates a new instance of MockRestoreTaskView. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRestoreTaskView(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRestoreTaskView {
	mock := &MockRestoreTaskView{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRestoreTaskView is an autogenerated mock type for the RestoreTaskView type
type MockRestoreTaskView struct {
	mock.Mock
}

type MockRestoreTaskView_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRestoreTaskView) EXPECT() *MockRestoreTaskView_Expecter {
	return &MockRestoreTaskView_Expecter{mock: &_m.Mock}
}

// CollTasks provides a mock function for the type MockRestoreTaskView
func (_mock *MockRestoreTaskView) CollTasks() map[namespace.NS]taskmgr.RestoreCollTaskView {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CollTasks")
	}

	var r0 map[namespace.NS]taskmgr.RestoreCollTaskView
	if returnFunc, ok := ret.Get(0).(func() map[namespace.NS]taskmgr.RestoreCollTaskView); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[namespace.NS]taskmgr.RestoreCollTaskView)
		}
	}
	return r0
}

// MockRestoreTaskView_CollTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CollTasks'
type MockRestoreTaskView_CollTasks_Call struct {
	*mock.Call
}

// CollTasks is a helper method to define mock.On call
func (_e *MockRestoreTaskView_Expecter) CollTasks() *MockRestoreTaskView_CollTasks_Call {
	return &MockRestoreTaskView_CollTasks_Call{Call: _e.mock.On("CollTasks")}
}

func (_c *MockRestoreTaskView_CollTasks_Call) Run(run func()) *MockRestoreTaskView_CollTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRestoreTaskView_CollTasks_Call) Return(nSToRestoreCollTaskView map[namespace.NS]taskmgr.RestoreCollTaskView) *MockRestoreTaskView_CollTasks_Call {
	_c.Call.Return(nSToRestoreCollTaskView)
	return _c
}

func (_c *MockRestoreTaskView_CollTasks_Call) RunAndReturn(run func() map[namespace.NS]taskmgr.RestoreCollTaskView) *MockRestoreTaskView_CollTasks_Call {
	_c.Call.Return(run)
	return _c
}

// EndTime provides a mock function for the type MockRestoreTaskView
func (_mock *MockRestoreTaskView) EndTime() time.Time {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for EndTime")
	}

	var r0 time.Time
	if returnFunc, ok := ret.Get(0).(func() time.Time); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(time.Time)
	}
	return r0
}

// MockRestoreTaskView_EndTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EndTime'
type MockRestoreTaskView_EndTime_Call struct {
	*mock.Call
}

// EndTime is a helper method to define mock.On call
func (_e *MockRestoreTaskView_Expecter) EndTime() *MockRestoreTaskView_EndTime_Call {
	return &MockRestoreTaskView_EndTime_Call{Call: _e.mock.On("EndTime")}
}

func (_c *MockRestoreTaskView_EndTime_Call) Run(run func()) *MockRestoreTaskView_EndTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRestoreTaskView_EndTime_Call) Return(time1 time.Time) *MockRestoreTaskView_EndTime_Call {
	_c.Call.Return(time1)
	return _c
}

func (_c *MockRestoreTaskView_EndTime_Call) RunAndReturn(run func() time.Time) *MockRestoreTaskView_EndTime_Call {
	_c.Call.Return(run)
	return _c
}

// ErrorMessage provides a mock function for the type MockRestoreTaskView
func (_mock *MockRestoreTaskView) ErrorMessage() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ErrorMessage")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockRestoreTaskView_ErrorMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ErrorMessage'
type MockRestoreTaskView_ErrorMessage_Call struct {
	*mock.Call
}

// ErrorMessage is a helper method to define mock.On call
func (_e *MockRestoreTaskView_Expecter) ErrorMessage() *MockRestoreTaskView_ErrorMessage_Call {
	return &MockRestoreTaskView_ErrorMessage_Call{Call: _e.mock.On("ErrorMessage")}
}

func (_c *MockRestoreTaskView_ErrorMessage_Call) Run(run func()) *MockRestoreTaskView_ErrorMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRestoreTaskView_ErrorMessage_Call) Return(s string) *MockRestoreTaskView_ErrorMessage_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockRestoreTaskView_ErrorMessage_Call) RunAndReturn(run func() string) *MockRestoreTaskView_ErrorMessage_Call {
	_c.Call.Return(run)
	return _c
}

// ID provides a mock function for the type MockRestoreTaskView
func (_mock *MockRestoreTaskView) ID() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockRestoreTaskView_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type MockRestoreTaskView_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
func (_e *MockRestoreTaskView_Expecter) ID() *MockRestoreTaskView_ID_Call {
	return &MockRestoreTaskView_ID_Call{Call: _e.mock.On("ID")}
}

func (_c *MockRestoreTaskView_ID_Call) Run(run func()) *MockRestoreTaskView_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRestoreTaskView_ID_Call) Return(s string) *MockRestoreTaskView_ID_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockRestoreTaskView_ID_Call) RunAndReturn(run func() string) *MockRestoreTaskView_ID_Call {
	_c.Call.Return(run)
	return _c
}

// Progress provides a mock function for the type MockRestoreTaskView
func (_mock *MockRestoreTaskView) Progress() int32 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Progress")
	}

	var r0 int32
	if returnFunc, ok := ret.Get(0).(func() int32); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int32)
	}
	return r0
}

// MockRestoreTaskView_Progress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Progress'
type MockRestoreTaskView_Progress_Call struct {
	*mock.Call
}

// Progress is a helper method to define mock.On call
func (_e *MockRestoreTaskView_Expecter) Progress() *MockRestoreTaskView_Progress_Call {
	return &MockRestoreTaskView_Progress_Call{Call: _e.mock.On("Progress")}
}

func (_c *MockRestoreTaskView_Progress_Call) Run(run func()) *MockRestoreTaskView_Progress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRestoreTaskView_Progress_Call) Return(n int32) *MockRestoreTaskView_Progress_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockRestoreTaskView_Progress_Call) RunAndReturn(run func() int32) *MockRestoreTaskView_Progress_Call {
	_c.Call.Return(run)
	return _c
}

// StartTime provides a mock function for the type MockRestoreTaskView
func (_mock *MockRestoreTaskView) StartTime() time.Time {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for StartTime")
	}

	var r0 time.Time
	if returnFunc, ok := ret.Get(0).(func() time.Time); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(time.Time)
	}
	return r0
}

// MockRestoreTaskView_StartTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartTime'
type MockRestoreTaskView_StartTime_Call struct {
	*mock.Call
}

// StartTime is a helper method to define mock.On call
func (_e *MockRestoreTaskView_Expecter) StartTime() *MockRestoreTaskView_StartTime_Call {
	return &MockRestoreTaskView_StartTime_Call{Call: _e.mock.On("StartTime")}
}

func (_c *MockRestoreTaskView_StartTime_Call) Run(run func()) *MockRestoreTaskView_StartTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRestoreTaskView_StartTime_Call) Return(time1 time.Time) *MockRestoreTaskView_StartTime_Call {
	_c.Call.Return(time1)
	return _c
}

func (_c *MockRestoreTaskView_StartTime_Call) RunAndReturn(run func() time.Time) *MockRestoreTaskView_StartTime_Call {
	_c.Call.Return(run)
	return _c
}

// StateCode provides a mock function for the type MockRestoreTaskView
func (_mock *MockRestoreTaskView) StateCode() backuppb.RestoreTaskStateCode {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for StateCode")
	}

	var r0 backuppb.RestoreTaskStateCode
	if returnFunc, ok := ret.Get(0).(func() backuppb.RestoreTaskStateCode); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(backuppb.RestoreTaskStateCode)
	}
	return r0
}

// MockRestoreTaskView_StateCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StateCode'
type MockRestoreTaskView_StateCode_Call struct {
	*mock.Call
}

// StateCode is a helper method to define mock.On call
func (_e *MockRestoreTaskView_Expecter) StateCode() *MockRestoreTaskView_StateCode_Call {
	return &MockRestoreTaskView_StateCode_Call{Call: _e.mock.On("StateCode")}
}

func (_c *MockRestoreTaskView_StateCode_Call) Run(run func()) *MockRestoreTaskView_StateCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRestoreTaskView_StateCode_Call) Return(restoreTaskStateCode backuppb.RestoreTaskStateCode) *MockRestoreTaskView_StateCode_Call {
	_c.Call.Return(restoreTaskStateCode)
	return _c
}

func (_c *MockRestoreTaskView_StateCode_Call) RunAndReturn(run func() backuppb.RestoreTaskStateCode) *MockRestoreTaskView_StateCode_Call {
	_c.Call.Return(run)
	return _c
}

// TotalSize provides a mock function for the type MockRestoreTaskView
func (_mock *MockRestoreTaskView) TotalSize() int64 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for TotalSize")
	}

	var r0 int64
	if returnFunc, ok := ret.Get(0).(func() int64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int64)
	}
	return r0
}

// MockRestoreTaskView_TotalSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TotalSize'
type MockRestoreTaskView_TotalSize_Call struct {
	*mock.Call
}

// TotalSize is a helper method to define mock.On call
func (_e *MockRestoreTaskView_Expecter) TotalSize() *MockRestoreTaskView_TotalSize_Call {
	return &MockRestoreTaskView_TotalSize_Call{Call: _e.mock.On("TotalSize")}
}

func (_c *MockRestoreTaskView_TotalSize_Call) Run(run func()) *MockRestoreTaskView_TotalSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRestoreTaskView_TotalSize_Call) Return(n int64) *MockRestoreTaskView_TotalSize_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockRestoreTaskView_TotalSize_Call) RunAndReturn(run func() int64) *MockRestoreTaskView_TotalSize_Call {
	_c.Call.Return(run)
	return _c
}
