// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"

	"github.com/zilliztech/milvus-backup/core/storage"
)

// NewMockChunkManager creates a new instance of MockChunkManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChunkManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChunkManager {
	mock := &MockChunkManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockChunkManager is an autogenerated mock type for the ChunkManager type
type MockChunkManager struct {
	mock.Mock
}

type MockChunkManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChunkManager) EXPECT() *MockChunkManager_Expecter {
	return &MockChunkManager_Expecter{mock: &_m.Mock}
}

// Config provides a mock function for the type MockChunkManager
func (_mock *MockChunkManager) Config() *storage.StorageConfig {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Config")
	}

	var r0 *storage.StorageConfig
	if returnFunc, ok := ret.Get(0).(func() *storage.StorageConfig); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.StorageConfig)
		}
	}
	return r0
}

// MockChunkManager_Config_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Config'
type MockChunkManager_Config_Call struct {
	*mock.Call
}

// Config is a helper method to define mock.On call
func (_e *MockChunkManager_Expecter) Config() *MockChunkManager_Config_Call {
	return &MockChunkManager_Config_Call{Call: _e.mock.On("Config")}
}

func (_c *MockChunkManager_Config_Call) Run(run func()) *MockChunkManager_Config_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockChunkManager_Config_Call) Return(storageConfig *storage.StorageConfig) *MockChunkManager_Config_Call {
	_c.Call.Return(storageConfig)
	return _c
}

func (_c *MockChunkManager_Config_Call) RunAndReturn(run func() *storage.StorageConfig) *MockChunkManager_Config_Call {
	_c.Call.Return(run)
	return _c
}

// CopyObject provides a mock function for the type MockChunkManager
func (_mock *MockChunkManager) CopyObject(ctx context.Context, fromBucketName string, toBucketName string, fromKey string, toKey string) error {
	ret := _mock.Called(ctx, fromBucketName, toBucketName, fromKey, toKey)

	if len(ret) == 0 {
		panic("no return value specified for CopyObject")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = returnFunc(ctx, fromBucketName, toBucketName, fromKey, toKey)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockChunkManager_CopyObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyObject'
type MockChunkManager_CopyObject_Call struct {
	*mock.Call
}

// CopyObject is a helper method to define mock.On call
//   - ctx
//   - fromBucketName
//   - toBucketName
//   - fromKey
//   - toKey
func (_e *MockChunkManager_Expecter) CopyObject(ctx interface{}, fromBucketName interface{}, toBucketName interface{}, fromKey interface{}, toKey interface{}) *MockChunkManager_CopyObject_Call {
	return &MockChunkManager_CopyObject_Call{Call: _e.mock.On("CopyObject", ctx, fromBucketName, toBucketName, fromKey, toKey)}
}

func (_c *MockChunkManager_CopyObject_Call) Run(run func(ctx context.Context, fromBucketName string, toBucketName string, fromKey string, toKey string)) *MockChunkManager_CopyObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockChunkManager_CopyObject_Call) Return(err error) *MockChunkManager_CopyObject_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockChunkManager_CopyObject_Call) RunAndReturn(run func(ctx context.Context, fromBucketName string, toBucketName string, fromKey string, toKey string) error) *MockChunkManager_CopyObject_Call {
	_c.Call.Return(run)
	return _c
}

// Exist provides a mock function for the type MockChunkManager
func (_mock *MockChunkManager) Exist(ctx context.Context, bucketName string, filePath string) (bool, error) {
	ret := _mock.Called(ctx, bucketName, filePath)

	if len(ret) == 0 {
		panic("no return value specified for Exist")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return returnFunc(ctx, bucketName, filePath)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = returnFunc(ctx, bucketName, filePath)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, bucketName, filePath)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChunkManager_Exist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exist'
type MockChunkManager_Exist_Call struct {
	*mock.Call
}

// Exist is a helper method to define mock.On call
//   - ctx
//   - bucketName
//   - filePath
func (_e *MockChunkManager_Expecter) Exist(ctx interface{}, bucketName interface{}, filePath interface{}) *MockChunkManager_Exist_Call {
	return &MockChunkManager_Exist_Call{Call: _e.mock.On("Exist", ctx, bucketName, filePath)}
}

func (_c *MockChunkManager_Exist_Call) Run(run func(ctx context.Context, bucketName string, filePath string)) *MockChunkManager_Exist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockChunkManager_Exist_Call) Return(b bool, err error) *MockChunkManager_Exist_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockChunkManager_Exist_Call) RunAndReturn(run func(ctx context.Context, bucketName string, filePath string) (bool, error)) *MockChunkManager_Exist_Call {
	_c.Call.Return(run)
	return _c
}

// GetObject provides a mock function for the type MockChunkManager
func (_mock *MockChunkManager) GetObject(ctx context.Context, bucket string, key string) (*storage.Object, error) {
	ret := _mock.Called(ctx, bucket, key)

	if len(ret) == 0 {
		panic("no return value specified for GetObject")
	}

	var r0 *storage.Object
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*storage.Object, error)); ok {
		return returnFunc(ctx, bucket, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *storage.Object); ok {
		r0 = returnFunc(ctx, bucket, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.Object)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, bucket, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChunkManager_GetObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObject'
type MockChunkManager_GetObject_Call struct {
	*mock.Call
}

// GetObject is a helper method to define mock.On call
//   - ctx
//   - bucket
//   - key
func (_e *MockChunkManager_Expecter) GetObject(ctx interface{}, bucket interface{}, key interface{}) *MockChunkManager_GetObject_Call {
	return &MockChunkManager_GetObject_Call{Call: _e.mock.On("GetObject", ctx, bucket, key)}
}

func (_c *MockChunkManager_GetObject_Call) Run(run func(ctx context.Context, bucket string, key string)) *MockChunkManager_GetObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockChunkManager_GetObject_Call) Return(object *storage.Object, err error) *MockChunkManager_GetObject_Call {
	_c.Call.Return(object, err)
	return _c
}

func (_c *MockChunkManager_GetObject_Call) RunAndReturn(run func(ctx context.Context, bucket string, key string) (*storage.Object, error)) *MockChunkManager_GetObject_Call {
	_c.Call.Return(run)
	return _c
}

// HeadObject provides a mock function for the type MockChunkManager
func (_mock *MockChunkManager) HeadObject(ctx context.Context, bucket string, key string) (storage.ObjectAttr, error) {
	ret := _mock.Called(ctx, bucket, key)

	if len(ret) == 0 {
		panic("no return value specified for HeadObject")
	}

	var r0 storage.ObjectAttr
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (storage.ObjectAttr, error)); ok {
		return returnFunc(ctx, bucket, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) storage.ObjectAttr); ok {
		r0 = returnFunc(ctx, bucket, key)
	} else {
		r0 = ret.Get(0).(storage.ObjectAttr)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, bucket, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChunkManager_HeadObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeadObject'
type MockChunkManager_HeadObject_Call struct {
	*mock.Call
}

// HeadObject is a helper method to define mock.On call
//   - ctx
//   - bucket
//   - key
func (_e *MockChunkManager_Expecter) HeadObject(ctx interface{}, bucket interface{}, key interface{}) *MockChunkManager_HeadObject_Call {
	return &MockChunkManager_HeadObject_Call{Call: _e.mock.On("HeadObject", ctx, bucket, key)}
}

func (_c *MockChunkManager_HeadObject_Call) Run(run func(ctx context.Context, bucket string, key string)) *MockChunkManager_HeadObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockChunkManager_HeadObject_Call) Return(objectAttr storage.ObjectAttr, err error) *MockChunkManager_HeadObject_Call {
	_c.Call.Return(objectAttr, err)
	return _c
}

func (_c *MockChunkManager_HeadObject_Call) RunAndReturn(run func(ctx context.Context, bucket string, key string) (storage.ObjectAttr, error)) *MockChunkManager_HeadObject_Call {
	_c.Call.Return(run)
	return _c
}

// ListObjectsPage provides a mock function for the type MockChunkManager
func (_mock *MockChunkManager) ListObjectsPage(ctx context.Context, bucket string, prefix string) (storage.ListObjectsPaginator, error) {
	ret := _mock.Called(ctx, bucket, prefix)

	if len(ret) == 0 {
		panic("no return value specified for ListObjectsPage")
	}

	var r0 storage.ListObjectsPaginator
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (storage.ListObjectsPaginator, error)); ok {
		return returnFunc(ctx, bucket, prefix)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) storage.ListObjectsPaginator); ok {
		r0 = returnFunc(ctx, bucket, prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.ListObjectsPaginator)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, bucket, prefix)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChunkManager_ListObjectsPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListObjectsPage'
type MockChunkManager_ListObjectsPage_Call struct {
	*mock.Call
}

// ListObjectsPage is a helper method to define mock.On call
//   - ctx
//   - bucket
//   - prefix
func (_e *MockChunkManager_Expecter) ListObjectsPage(ctx interface{}, bucket interface{}, prefix interface{}) *MockChunkManager_ListObjectsPage_Call {
	return &MockChunkManager_ListObjectsPage_Call{Call: _e.mock.On("ListObjectsPage", ctx, bucket, prefix)}
}

func (_c *MockChunkManager_ListObjectsPage_Call) Run(run func(ctx context.Context, bucket string, prefix string)) *MockChunkManager_ListObjectsPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockChunkManager_ListObjectsPage_Call) Return(listObjectsPaginator storage.ListObjectsPaginator, err error) *MockChunkManager_ListObjectsPage_Call {
	_c.Call.Return(listObjectsPaginator, err)
	return _c
}

func (_c *MockChunkManager_ListObjectsPage_Call) RunAndReturn(run func(ctx context.Context, bucket string, prefix string) (storage.ListObjectsPaginator, error)) *MockChunkManager_ListObjectsPage_Call {
	_c.Call.Return(run)
	return _c
}

// ListWithPrefix provides a mock function for the type MockChunkManager
func (_mock *MockChunkManager) ListWithPrefix(ctx context.Context, bucketName string, prefix string, recursive bool) ([]string, []int64, error) {
	ret := _mock.Called(ctx, bucketName, prefix, recursive)

	if len(ret) == 0 {
		panic("no return value specified for ListWithPrefix")
	}

	var r0 []string
	var r1 []int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, bool) ([]string, []int64, error)); ok {
		return returnFunc(ctx, bucketName, prefix, recursive)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, bool) []string); ok {
		r0 = returnFunc(ctx, bucketName, prefix, recursive)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, bool) []int64); ok {
		r1 = returnFunc(ctx, bucketName, prefix, recursive)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]int64)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string, string, bool) error); ok {
		r2 = returnFunc(ctx, bucketName, prefix, recursive)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockChunkManager_ListWithPrefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWithPrefix'
type MockChunkManager_ListWithPrefix_Call struct {
	*mock.Call
}

// ListWithPrefix is a helper method to define mock.On call
//   - ctx
//   - bucketName
//   - prefix
//   - recursive
func (_e *MockChunkManager_Expecter) ListWithPrefix(ctx interface{}, bucketName interface{}, prefix interface{}, recursive interface{}) *MockChunkManager_ListWithPrefix_Call {
	return &MockChunkManager_ListWithPrefix_Call{Call: _e.mock.On("ListWithPrefix", ctx, bucketName, prefix, recursive)}
}

func (_c *MockChunkManager_ListWithPrefix_Call) Run(run func(ctx context.Context, bucketName string, prefix string, recursive bool)) *MockChunkManager_ListWithPrefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(bool))
	})
	return _c
}

func (_c *MockChunkManager_ListWithPrefix_Call) Return(strings []string, int64s []int64, err error) *MockChunkManager_ListWithPrefix_Call {
	_c.Call.Return(strings, int64s, err)
	return _c
}

func (_c *MockChunkManager_ListWithPrefix_Call) RunAndReturn(run func(ctx context.Context, bucketName string, prefix string, recursive bool) ([]string, []int64, error)) *MockChunkManager_ListWithPrefix_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function for the type MockChunkManager
func (_mock *MockChunkManager) Read(ctx context.Context, bucketName string, filePath string) ([]byte, error) {
	ret := _mock.Called(ctx, bucketName, filePath)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) ([]byte, error)); ok {
		return returnFunc(ctx, bucketName, filePath)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) []byte); ok {
		r0 = returnFunc(ctx, bucketName, filePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, bucketName, filePath)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockChunkManager_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockChunkManager_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - ctx
//   - bucketName
//   - filePath
func (_e *MockChunkManager_Expecter) Read(ctx interface{}, bucketName interface{}, filePath interface{}) *MockChunkManager_Read_Call {
	return &MockChunkManager_Read_Call{Call: _e.mock.On("Read", ctx, bucketName, filePath)}
}

func (_c *MockChunkManager_Read_Call) Run(run func(ctx context.Context, bucketName string, filePath string)) *MockChunkManager_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockChunkManager_Read_Call) Return(bytes []byte, err error) *MockChunkManager_Read_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockChunkManager_Read_Call) RunAndReturn(run func(ctx context.Context, bucketName string, filePath string) ([]byte, error)) *MockChunkManager_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function for the type MockChunkManager
func (_mock *MockChunkManager) Remove(ctx context.Context, bucketName string, filePath string) error {
	ret := _mock.Called(ctx, bucketName, filePath)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, bucketName, filePath)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockChunkManager_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockChunkManager_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - ctx
//   - bucketName
//   - filePath
func (_e *MockChunkManager_Expecter) Remove(ctx interface{}, bucketName interface{}, filePath interface{}) *MockChunkManager_Remove_Call {
	return &MockChunkManager_Remove_Call{Call: _e.mock.On("Remove", ctx, bucketName, filePath)}
}

func (_c *MockChunkManager_Remove_Call) Run(run func(ctx context.Context, bucketName string, filePath string)) *MockChunkManager_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockChunkManager_Remove_Call) Return(err error) *MockChunkManager_Remove_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockChunkManager_Remove_Call) RunAndReturn(run func(ctx context.Context, bucketName string, filePath string) error) *MockChunkManager_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveWithPrefix provides a mock function for the type MockChunkManager
func (_mock *MockChunkManager) RemoveWithPrefix(ctx context.Context, bucketName string, prefix string) error {
	ret := _mock.Called(ctx, bucketName, prefix)

	if len(ret) == 0 {
		panic("no return value specified for RemoveWithPrefix")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, bucketName, prefix)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockChunkManager_RemoveWithPrefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveWithPrefix'
type MockChunkManager_RemoveWithPrefix_Call struct {
	*mock.Call
}

// RemoveWithPrefix is a helper method to define mock.On call
//   - ctx
//   - bucketName
//   - prefix
func (_e *MockChunkManager_Expecter) RemoveWithPrefix(ctx interface{}, bucketName interface{}, prefix interface{}) *MockChunkManager_RemoveWithPrefix_Call {
	return &MockChunkManager_RemoveWithPrefix_Call{Call: _e.mock.On("RemoveWithPrefix", ctx, bucketName, prefix)}
}

func (_c *MockChunkManager_RemoveWithPrefix_Call) Run(run func(ctx context.Context, bucketName string, prefix string)) *MockChunkManager_RemoveWithPrefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockChunkManager_RemoveWithPrefix_Call) Return(err error) *MockChunkManager_RemoveWithPrefix_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockChunkManager_RemoveWithPrefix_Call) RunAndReturn(run func(ctx context.Context, bucketName string, prefix string) error) *MockChunkManager_RemoveWithPrefix_Call {
	_c.Call.Return(run)
	return _c
}

// UploadObject provides a mock function for the type MockChunkManager
func (_mock *MockChunkManager) UploadObject(ctx context.Context, i storage.UploadObjectInput) error {
	ret := _mock.Called(ctx, i)

	if len(ret) == 0 {
		panic("no return value specified for UploadObject")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, storage.UploadObjectInput) error); ok {
		r0 = returnFunc(ctx, i)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockChunkManager_UploadObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadObject'
type MockChunkManager_UploadObject_Call struct {
	*mock.Call
}

// UploadObject is a helper method to define mock.On call
//   - ctx
//   - i
func (_e *MockChunkManager_Expecter) UploadObject(ctx interface{}, i interface{}) *MockChunkManager_UploadObject_Call {
	return &MockChunkManager_UploadObject_Call{Call: _e.mock.On("UploadObject", ctx, i)}
}

func (_c *MockChunkManager_UploadObject_Call) Run(run func(ctx context.Context, i storage.UploadObjectInput)) *MockChunkManager_UploadObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(storage.UploadObjectInput))
	})
	return _c
}

func (_c *MockChunkManager_UploadObject_Call) Return(err error) *MockChunkManager_UploadObject_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockChunkManager_UploadObject_Call) RunAndReturn(run func(ctx context.Context, i storage.UploadObjectInput) error) *MockChunkManager_UploadObject_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function for the type MockChunkManager
func (_mock *MockChunkManager) Write(ctx context.Context, bucketName string, filePath string, content []byte) error {
	ret := _mock.Called(ctx, bucketName, filePath, content)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, []byte) error); ok {
		r0 = returnFunc(ctx, bucketName, filePath, content)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockChunkManager_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type MockChunkManager_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - ctx
//   - bucketName
//   - filePath
//   - content
func (_e *MockChunkManager_Expecter) Write(ctx interface{}, bucketName interface{}, filePath interface{}, content interface{}) *MockChunkManager_Write_Call {
	return &MockChunkManager_Write_Call{Call: _e.mock.On("Write", ctx, bucketName, filePath, content)}
}

func (_c *MockChunkManager_Write_Call) Run(run func(ctx context.Context, bucketName string, filePath string, content []byte)) *MockChunkManager_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]byte))
	})
	return _c
}

func (_c *MockChunkManager_Write_Call) Return(err error) *MockChunkManager_Write_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockChunkManager_Write_Call) RunAndReturn(run func(ctx context.Context, bucketName string, filePath string, content []byte) error) *MockChunkManager_Write_Call {
	_c.Call.Return(run)
	return _c
}
