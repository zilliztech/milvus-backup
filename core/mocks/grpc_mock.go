// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/zilliztech/milvus-backup/core/client"

	milvuspb "github.com/milvus-io/milvus-proto/go-api/v2/milvuspb"

	mock "github.com/stretchr/testify/mock"
)

// MockGrpc is an autogenerated mock type for the Grpc type
type MockGrpc struct {
	mock.Mock
}

type MockGrpc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGrpc) EXPECT() *MockGrpc_Expecter {
	return &MockGrpc_Expecter{mock: &_m.Mock}
}

// BackupRBAC provides a mock function with given fields: ctx
func (_m *MockGrpc) BackupRBAC(ctx context.Context) (*milvuspb.BackupRBACMetaResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BackupRBAC")
	}

	var r0 *milvuspb.BackupRBACMetaResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*milvuspb.BackupRBACMetaResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *milvuspb.BackupRBACMetaResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*milvuspb.BackupRBACMetaResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGrpc_BackupRBAC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BackupRBAC'
type MockGrpc_BackupRBAC_Call struct {
	*mock.Call
}

// BackupRBAC is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockGrpc_Expecter) BackupRBAC(ctx interface{}) *MockGrpc_BackupRBAC_Call {
	return &MockGrpc_BackupRBAC_Call{Call: _e.mock.On("BackupRBAC", ctx)}
}

func (_c *MockGrpc_BackupRBAC_Call) Run(run func(ctx context.Context)) *MockGrpc_BackupRBAC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockGrpc_BackupRBAC_Call) Return(_a0 *milvuspb.BackupRBACMetaResponse, _a1 error) *MockGrpc_BackupRBAC_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGrpc_BackupRBAC_Call) RunAndReturn(run func(context.Context) (*milvuspb.BackupRBACMetaResponse, error)) *MockGrpc_BackupRBAC_Call {
	_c.Call.Return(run)
	return _c
}

// BulkInsert provides a mock function with given fields: ctx, input
func (_m *MockGrpc) BulkInsert(ctx context.Context, input client.GrpcBulkInsertInput) (int64, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for BulkInsert")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, client.GrpcBulkInsertInput) (int64, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, client.GrpcBulkInsertInput) int64); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, client.GrpcBulkInsertInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGrpc_BulkInsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkInsert'
type MockGrpc_BulkInsert_Call struct {
	*mock.Call
}

// BulkInsert is a helper method to define mock.On call
//   - ctx context.Context
//   - input client.GrpcBulkInsertInput
func (_e *MockGrpc_Expecter) BulkInsert(ctx interface{}, input interface{}) *MockGrpc_BulkInsert_Call {
	return &MockGrpc_BulkInsert_Call{Call: _e.mock.On("BulkInsert", ctx, input)}
}

func (_c *MockGrpc_BulkInsert_Call) Run(run func(ctx context.Context, input client.GrpcBulkInsertInput)) *MockGrpc_BulkInsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.GrpcBulkInsertInput))
	})
	return _c
}

func (_c *MockGrpc_BulkInsert_Call) Return(_a0 int64, _a1 error) *MockGrpc_BulkInsert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGrpc_BulkInsert_Call) RunAndReturn(run func(context.Context, client.GrpcBulkInsertInput) (int64, error)) *MockGrpc_BulkInsert_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with no fields
func (_m *MockGrpc) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGrpc_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockGrpc_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockGrpc_Expecter) Close() *MockGrpc_Close_Call {
	return &MockGrpc_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockGrpc_Close_Call) Run(run func()) *MockGrpc_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGrpc_Close_Call) Return(_a0 error) *MockGrpc_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGrpc_Close_Call) RunAndReturn(run func() error) *MockGrpc_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCollection provides a mock function with given fields: ctx, input
func (_m *MockGrpc) CreateCollection(ctx context.Context, input client.CreateCollectionInput) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateCollection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.CreateCollectionInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGrpc_CreateCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCollection'
type MockGrpc_CreateCollection_Call struct {
	*mock.Call
}

// CreateCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - input client.CreateCollectionInput
func (_e *MockGrpc_Expecter) CreateCollection(ctx interface{}, input interface{}) *MockGrpc_CreateCollection_Call {
	return &MockGrpc_CreateCollection_Call{Call: _e.mock.On("CreateCollection", ctx, input)}
}

func (_c *MockGrpc_CreateCollection_Call) Run(run func(ctx context.Context, input client.CreateCollectionInput)) *MockGrpc_CreateCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.CreateCollectionInput))
	})
	return _c
}

func (_c *MockGrpc_CreateCollection_Call) Return(_a0 error) *MockGrpc_CreateCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGrpc_CreateCollection_Call) RunAndReturn(run func(context.Context, client.CreateCollectionInput) error) *MockGrpc_CreateCollection_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDatabase provides a mock function with given fields: ctx, dbName
func (_m *MockGrpc) CreateDatabase(ctx context.Context, dbName string) error {
	ret := _m.Called(ctx, dbName)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatabase")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, dbName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGrpc_CreateDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDatabase'
type MockGrpc_CreateDatabase_Call struct {
	*mock.Call
}

// CreateDatabase is a helper method to define mock.On call
//   - ctx context.Context
//   - dbName string
func (_e *MockGrpc_Expecter) CreateDatabase(ctx interface{}, dbName interface{}) *MockGrpc_CreateDatabase_Call {
	return &MockGrpc_CreateDatabase_Call{Call: _e.mock.On("CreateDatabase", ctx, dbName)}
}

func (_c *MockGrpc_CreateDatabase_Call) Run(run func(ctx context.Context, dbName string)) *MockGrpc_CreateDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockGrpc_CreateDatabase_Call) Return(_a0 error) *MockGrpc_CreateDatabase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGrpc_CreateDatabase_Call) RunAndReturn(run func(context.Context, string) error) *MockGrpc_CreateDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIndex provides a mock function with given fields: ctx, input
func (_m *MockGrpc) CreateIndex(ctx context.Context, input client.CreateIndexInput) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, client.CreateIndexInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGrpc_CreateIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIndex'
type MockGrpc_CreateIndex_Call struct {
	*mock.Call
}

// CreateIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - input client.CreateIndexInput
func (_e *MockGrpc_Expecter) CreateIndex(ctx interface{}, input interface{}) *MockGrpc_CreateIndex_Call {
	return &MockGrpc_CreateIndex_Call{Call: _e.mock.On("CreateIndex", ctx, input)}
}

func (_c *MockGrpc_CreateIndex_Call) Run(run func(ctx context.Context, input client.CreateIndexInput)) *MockGrpc_CreateIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(client.CreateIndexInput))
	})
	return _c
}

func (_c *MockGrpc_CreateIndex_Call) Return(_a0 error) *MockGrpc_CreateIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGrpc_CreateIndex_Call) RunAndReturn(run func(context.Context, client.CreateIndexInput) error) *MockGrpc_CreateIndex_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePartition provides a mock function with given fields: ctx, db, collName, partitionName
func (_m *MockGrpc) CreatePartition(ctx context.Context, db string, collName string, partitionName string) error {
	ret := _m.Called(ctx, db, collName, partitionName)

	if len(ret) == 0 {
		panic("no return value specified for CreatePartition")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, db, collName, partitionName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGrpc_CreatePartition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePartition'
type MockGrpc_CreatePartition_Call struct {
	*mock.Call
}

// CreatePartition is a helper method to define mock.On call
//   - ctx context.Context
//   - db string
//   - collName string
//   - partitionName string
func (_e *MockGrpc_Expecter) CreatePartition(ctx interface{}, db interface{}, collName interface{}, partitionName interface{}) *MockGrpc_CreatePartition_Call {
	return &MockGrpc_CreatePartition_Call{Call: _e.mock.On("CreatePartition", ctx, db, collName, partitionName)}
}

func (_c *MockGrpc_CreatePartition_Call) Run(run func(ctx context.Context, db string, collName string, partitionName string)) *MockGrpc_CreatePartition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockGrpc_CreatePartition_Call) Return(_a0 error) *MockGrpc_CreatePartition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGrpc_CreatePartition_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockGrpc_CreatePartition_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeCollection provides a mock function with given fields: ctx, db, collName
func (_m *MockGrpc) DescribeCollection(ctx context.Context, db string, collName string) (*milvuspb.DescribeCollectionResponse, error) {
	ret := _m.Called(ctx, db, collName)

	if len(ret) == 0 {
		panic("no return value specified for DescribeCollection")
	}

	var r0 *milvuspb.DescribeCollectionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*milvuspb.DescribeCollectionResponse, error)); ok {
		return rf(ctx, db, collName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *milvuspb.DescribeCollectionResponse); ok {
		r0 = rf(ctx, db, collName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*milvuspb.DescribeCollectionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, db, collName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGrpc_DescribeCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeCollection'
type MockGrpc_DescribeCollection_Call struct {
	*mock.Call
}

// DescribeCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - db string
//   - collName string
func (_e *MockGrpc_Expecter) DescribeCollection(ctx interface{}, db interface{}, collName interface{}) *MockGrpc_DescribeCollection_Call {
	return &MockGrpc_DescribeCollection_Call{Call: _e.mock.On("DescribeCollection", ctx, db, collName)}
}

func (_c *MockGrpc_DescribeCollection_Call) Run(run func(ctx context.Context, db string, collName string)) *MockGrpc_DescribeCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockGrpc_DescribeCollection_Call) Return(_a0 *milvuspb.DescribeCollectionResponse, _a1 error) *MockGrpc_DescribeCollection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGrpc_DescribeCollection_Call) RunAndReturn(run func(context.Context, string, string) (*milvuspb.DescribeCollectionResponse, error)) *MockGrpc_DescribeCollection_Call {
	_c.Call.Return(run)
	return _c
}

// DropCollection provides a mock function with given fields: ctx, db, collectionName
func (_m *MockGrpc) DropCollection(ctx context.Context, db string, collectionName string) error {
	ret := _m.Called(ctx, db, collectionName)

	if len(ret) == 0 {
		panic("no return value specified for DropCollection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, db, collectionName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGrpc_DropCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropCollection'
type MockGrpc_DropCollection_Call struct {
	*mock.Call
}

// DropCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - db string
//   - collectionName string
func (_e *MockGrpc_Expecter) DropCollection(ctx interface{}, db interface{}, collectionName interface{}) *MockGrpc_DropCollection_Call {
	return &MockGrpc_DropCollection_Call{Call: _e.mock.On("DropCollection", ctx, db, collectionName)}
}

func (_c *MockGrpc_DropCollection_Call) Run(run func(ctx context.Context, db string, collectionName string)) *MockGrpc_DropCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockGrpc_DropCollection_Call) Return(_a0 error) *MockGrpc_DropCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGrpc_DropCollection_Call) RunAndReturn(run func(context.Context, string, string) error) *MockGrpc_DropCollection_Call {
	_c.Call.Return(run)
	return _c
}

// DropIndex provides a mock function with given fields: ctx, db, collName, indexName
func (_m *MockGrpc) DropIndex(ctx context.Context, db string, collName string, indexName string) error {
	ret := _m.Called(ctx, db, collName, indexName)

	if len(ret) == 0 {
		panic("no return value specified for DropIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, db, collName, indexName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGrpc_DropIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropIndex'
type MockGrpc_DropIndex_Call struct {
	*mock.Call
}

// DropIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - db string
//   - collName string
//   - indexName string
func (_e *MockGrpc_Expecter) DropIndex(ctx interface{}, db interface{}, collName interface{}, indexName interface{}) *MockGrpc_DropIndex_Call {
	return &MockGrpc_DropIndex_Call{Call: _e.mock.On("DropIndex", ctx, db, collName, indexName)}
}

func (_c *MockGrpc_DropIndex_Call) Run(run func(ctx context.Context, db string, collName string, indexName string)) *MockGrpc_DropIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockGrpc_DropIndex_Call) Return(_a0 error) *MockGrpc_DropIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGrpc_DropIndex_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockGrpc_DropIndex_Call {
	_c.Call.Return(run)
	return _c
}

// Flush provides a mock function with given fields: ctx, db, collName
func (_m *MockGrpc) Flush(ctx context.Context, db string, collName string) (*milvuspb.FlushResponse, error) {
	ret := _m.Called(ctx, db, collName)

	if len(ret) == 0 {
		panic("no return value specified for Flush")
	}

	var r0 *milvuspb.FlushResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*milvuspb.FlushResponse, error)); ok {
		return rf(ctx, db, collName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *milvuspb.FlushResponse); ok {
		r0 = rf(ctx, db, collName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*milvuspb.FlushResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, db, collName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGrpc_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type MockGrpc_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
//   - ctx context.Context
//   - db string
//   - collName string
func (_e *MockGrpc_Expecter) Flush(ctx interface{}, db interface{}, collName interface{}) *MockGrpc_Flush_Call {
	return &MockGrpc_Flush_Call{Call: _e.mock.On("Flush", ctx, db, collName)}
}

func (_c *MockGrpc_Flush_Call) Run(run func(ctx context.Context, db string, collName string)) *MockGrpc_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockGrpc_Flush_Call) Return(_a0 *milvuspb.FlushResponse, _a1 error) *MockGrpc_Flush_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGrpc_Flush_Call) RunAndReturn(run func(context.Context, string, string) (*milvuspb.FlushResponse, error)) *MockGrpc_Flush_Call {
	_c.Call.Return(run)
	return _c
}

// GetBulkInsertState provides a mock function with given fields: ctx, taskID
func (_m *MockGrpc) GetBulkInsertState(ctx context.Context, taskID int64) (*milvuspb.GetImportStateResponse, error) {
	ret := _m.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetBulkInsertState")
	}

	var r0 *milvuspb.GetImportStateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*milvuspb.GetImportStateResponse, error)); ok {
		return rf(ctx, taskID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *milvuspb.GetImportStateResponse); ok {
		r0 = rf(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*milvuspb.GetImportStateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGrpc_GetBulkInsertState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBulkInsertState'
type MockGrpc_GetBulkInsertState_Call struct {
	*mock.Call
}

// GetBulkInsertState is a helper method to define mock.On call
//   - ctx context.Context
//   - taskID int64
func (_e *MockGrpc_Expecter) GetBulkInsertState(ctx interface{}, taskID interface{}) *MockGrpc_GetBulkInsertState_Call {
	return &MockGrpc_GetBulkInsertState_Call{Call: _e.mock.On("GetBulkInsertState", ctx, taskID)}
}

func (_c *MockGrpc_GetBulkInsertState_Call) Run(run func(ctx context.Context, taskID int64)) *MockGrpc_GetBulkInsertState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockGrpc_GetBulkInsertState_Call) Return(_a0 *milvuspb.GetImportStateResponse, _a1 error) *MockGrpc_GetBulkInsertState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGrpc_GetBulkInsertState_Call) RunAndReturn(run func(context.Context, int64) (*milvuspb.GetImportStateResponse, error)) *MockGrpc_GetBulkInsertState_Call {
	_c.Call.Return(run)
	return _c
}

// GetLoadingProgress provides a mock function with given fields: ctx, db, collName, partitionNames
func (_m *MockGrpc) GetLoadingProgress(ctx context.Context, db string, collName string, partitionNames []string) (int64, error) {
	ret := _m.Called(ctx, db, collName, partitionNames)

	if len(ret) == 0 {
		panic("no return value specified for GetLoadingProgress")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) (int64, error)); ok {
		return rf(ctx, db, collName, partitionNames)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) int64); ok {
		r0 = rf(ctx, db, collName, partitionNames)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []string) error); ok {
		r1 = rf(ctx, db, collName, partitionNames)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGrpc_GetLoadingProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLoadingProgress'
type MockGrpc_GetLoadingProgress_Call struct {
	*mock.Call
}

// GetLoadingProgress is a helper method to define mock.On call
//   - ctx context.Context
//   - db string
//   - collName string
//   - partitionNames []string
func (_e *MockGrpc_Expecter) GetLoadingProgress(ctx interface{}, db interface{}, collName interface{}, partitionNames interface{}) *MockGrpc_GetLoadingProgress_Call {
	return &MockGrpc_GetLoadingProgress_Call{Call: _e.mock.On("GetLoadingProgress", ctx, db, collName, partitionNames)}
}

func (_c *MockGrpc_GetLoadingProgress_Call) Run(run func(ctx context.Context, db string, collName string, partitionNames []string)) *MockGrpc_GetLoadingProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]string))
	})
	return _c
}

func (_c *MockGrpc_GetLoadingProgress_Call) Return(_a0 int64, _a1 error) *MockGrpc_GetLoadingProgress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGrpc_GetLoadingProgress_Call) RunAndReturn(run func(context.Context, string, string, []string) (int64, error)) *MockGrpc_GetLoadingProgress_Call {
	_c.Call.Return(run)
	return _c
}

// GetPersistentSegmentInfo provides a mock function with given fields: ctx, db, collName
func (_m *MockGrpc) GetPersistentSegmentInfo(ctx context.Context, db string, collName string) ([]*milvuspb.PersistentSegmentInfo, error) {
	ret := _m.Called(ctx, db, collName)

	if len(ret) == 0 {
		panic("no return value specified for GetPersistentSegmentInfo")
	}

	var r0 []*milvuspb.PersistentSegmentInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*milvuspb.PersistentSegmentInfo, error)); ok {
		return rf(ctx, db, collName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*milvuspb.PersistentSegmentInfo); ok {
		r0 = rf(ctx, db, collName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*milvuspb.PersistentSegmentInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, db, collName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGrpc_GetPersistentSegmentInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPersistentSegmentInfo'
type MockGrpc_GetPersistentSegmentInfo_Call struct {
	*mock.Call
}

// GetPersistentSegmentInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - db string
//   - collName string
func (_e *MockGrpc_Expecter) GetPersistentSegmentInfo(ctx interface{}, db interface{}, collName interface{}) *MockGrpc_GetPersistentSegmentInfo_Call {
	return &MockGrpc_GetPersistentSegmentInfo_Call{Call: _e.mock.On("GetPersistentSegmentInfo", ctx, db, collName)}
}

func (_c *MockGrpc_GetPersistentSegmentInfo_Call) Run(run func(ctx context.Context, db string, collName string)) *MockGrpc_GetPersistentSegmentInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockGrpc_GetPersistentSegmentInfo_Call) Return(_a0 []*milvuspb.PersistentSegmentInfo, _a1 error) *MockGrpc_GetPersistentSegmentInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGrpc_GetPersistentSegmentInfo_Call) RunAndReturn(run func(context.Context, string, string) ([]*milvuspb.PersistentSegmentInfo, error)) *MockGrpc_GetPersistentSegmentInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetVersion provides a mock function with given fields: ctx
func (_m *MockGrpc) GetVersion(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetVersion")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGrpc_GetVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersion'
type MockGrpc_GetVersion_Call struct {
	*mock.Call
}

// GetVersion is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockGrpc_Expecter) GetVersion(ctx interface{}) *MockGrpc_GetVersion_Call {
	return &MockGrpc_GetVersion_Call{Call: _e.mock.On("GetVersion", ctx)}
}

func (_c *MockGrpc_GetVersion_Call) Run(run func(ctx context.Context)) *MockGrpc_GetVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockGrpc_GetVersion_Call) Return(_a0 string, _a1 error) *MockGrpc_GetVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGrpc_GetVersion_Call) RunAndReturn(run func(context.Context) (string, error)) *MockGrpc_GetVersion_Call {
	_c.Call.Return(run)
	return _c
}

// HasCollection provides a mock function with given fields: ctx, db, collName
func (_m *MockGrpc) HasCollection(ctx context.Context, db string, collName string) (bool, error) {
	ret := _m.Called(ctx, db, collName)

	if len(ret) == 0 {
		panic("no return value specified for HasCollection")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, db, collName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, db, collName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, db, collName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGrpc_HasCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasCollection'
type MockGrpc_HasCollection_Call struct {
	*mock.Call
}

// HasCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - db string
//   - collName string
func (_e *MockGrpc_Expecter) HasCollection(ctx interface{}, db interface{}, collName interface{}) *MockGrpc_HasCollection_Call {
	return &MockGrpc_HasCollection_Call{Call: _e.mock.On("HasCollection", ctx, db, collName)}
}

func (_c *MockGrpc_HasCollection_Call) Run(run func(ctx context.Context, db string, collName string)) *MockGrpc_HasCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockGrpc_HasCollection_Call) Return(_a0 bool, _a1 error) *MockGrpc_HasCollection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGrpc_HasCollection_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *MockGrpc_HasCollection_Call {
	_c.Call.Return(run)
	return _c
}

// HasPartition provides a mock function with given fields: ctx, db, collName, partitionName
func (_m *MockGrpc) HasPartition(ctx context.Context, db string, collName string, partitionName string) (bool, error) {
	ret := _m.Called(ctx, db, collName, partitionName)

	if len(ret) == 0 {
		panic("no return value specified for HasPartition")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (bool, error)); ok {
		return rf(ctx, db, collName, partitionName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = rf(ctx, db, collName, partitionName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, db, collName, partitionName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGrpc_HasPartition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasPartition'
type MockGrpc_HasPartition_Call struct {
	*mock.Call
}

// HasPartition is a helper method to define mock.On call
//   - ctx context.Context
//   - db string
//   - collName string
//   - partitionName string
func (_e *MockGrpc_Expecter) HasPartition(ctx interface{}, db interface{}, collName interface{}, partitionName interface{}) *MockGrpc_HasPartition_Call {
	return &MockGrpc_HasPartition_Call{Call: _e.mock.On("HasPartition", ctx, db, collName, partitionName)}
}

func (_c *MockGrpc_HasPartition_Call) Run(run func(ctx context.Context, db string, collName string, partitionName string)) *MockGrpc_HasPartition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockGrpc_HasPartition_Call) Return(_a0 bool, _a1 error) *MockGrpc_HasPartition_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGrpc_HasPartition_Call) RunAndReturn(run func(context.Context, string, string, string) (bool, error)) *MockGrpc_HasPartition_Call {
	_c.Call.Return(run)
	return _c
}

// ListCollections provides a mock function with given fields: ctx, db
func (_m *MockGrpc) ListCollections(ctx context.Context, db string) (*milvuspb.ShowCollectionsResponse, error) {
	ret := _m.Called(ctx, db)

	if len(ret) == 0 {
		panic("no return value specified for ListCollections")
	}

	var r0 *milvuspb.ShowCollectionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*milvuspb.ShowCollectionsResponse, error)); ok {
		return rf(ctx, db)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *milvuspb.ShowCollectionsResponse); ok {
		r0 = rf(ctx, db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*milvuspb.ShowCollectionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, db)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGrpc_ListCollections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCollections'
type MockGrpc_ListCollections_Call struct {
	*mock.Call
}

// ListCollections is a helper method to define mock.On call
//   - ctx context.Context
//   - db string
func (_e *MockGrpc_Expecter) ListCollections(ctx interface{}, db interface{}) *MockGrpc_ListCollections_Call {
	return &MockGrpc_ListCollections_Call{Call: _e.mock.On("ListCollections", ctx, db)}
}

func (_c *MockGrpc_ListCollections_Call) Run(run func(ctx context.Context, db string)) *MockGrpc_ListCollections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockGrpc_ListCollections_Call) Return(_a0 *milvuspb.ShowCollectionsResponse, _a1 error) *MockGrpc_ListCollections_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGrpc_ListCollections_Call) RunAndReturn(run func(context.Context, string) (*milvuspb.ShowCollectionsResponse, error)) *MockGrpc_ListCollections_Call {
	_c.Call.Return(run)
	return _c
}

// ListDatabases provides a mock function with given fields: ctx
func (_m *MockGrpc) ListDatabases(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListDatabases")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGrpc_ListDatabases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDatabases'
type MockGrpc_ListDatabases_Call struct {
	*mock.Call
}

// ListDatabases is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockGrpc_Expecter) ListDatabases(ctx interface{}) *MockGrpc_ListDatabases_Call {
	return &MockGrpc_ListDatabases_Call{Call: _e.mock.On("ListDatabases", ctx)}
}

func (_c *MockGrpc_ListDatabases_Call) Run(run func(ctx context.Context)) *MockGrpc_ListDatabases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockGrpc_ListDatabases_Call) Return(_a0 []string, _a1 error) *MockGrpc_ListDatabases_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGrpc_ListDatabases_Call) RunAndReturn(run func(context.Context) ([]string, error)) *MockGrpc_ListDatabases_Call {
	_c.Call.Return(run)
	return _c
}

// ListIndex provides a mock function with given fields: ctx, db, collName
func (_m *MockGrpc) ListIndex(ctx context.Context, db string, collName string) ([]*milvuspb.IndexDescription, error) {
	ret := _m.Called(ctx, db, collName)

	if len(ret) == 0 {
		panic("no return value specified for ListIndex")
	}

	var r0 []*milvuspb.IndexDescription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*milvuspb.IndexDescription, error)); ok {
		return rf(ctx, db, collName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*milvuspb.IndexDescription); ok {
		r0 = rf(ctx, db, collName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*milvuspb.IndexDescription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, db, collName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGrpc_ListIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIndex'
type MockGrpc_ListIndex_Call struct {
	*mock.Call
}

// ListIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - db string
//   - collName string
func (_e *MockGrpc_Expecter) ListIndex(ctx interface{}, db interface{}, collName interface{}) *MockGrpc_ListIndex_Call {
	return &MockGrpc_ListIndex_Call{Call: _e.mock.On("ListIndex", ctx, db, collName)}
}

func (_c *MockGrpc_ListIndex_Call) Run(run func(ctx context.Context, db string, collName string)) *MockGrpc_ListIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockGrpc_ListIndex_Call) Return(_a0 []*milvuspb.IndexDescription, _a1 error) *MockGrpc_ListIndex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGrpc_ListIndex_Call) RunAndReturn(run func(context.Context, string, string) ([]*milvuspb.IndexDescription, error)) *MockGrpc_ListIndex_Call {
	_c.Call.Return(run)
	return _c
}

// RestoreRBAC provides a mock function with given fields: ctx, rbacMeta
func (_m *MockGrpc) RestoreRBAC(ctx context.Context, rbacMeta *milvuspb.RBACMeta) error {
	ret := _m.Called(ctx, rbacMeta)

	if len(ret) == 0 {
		panic("no return value specified for RestoreRBAC")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *milvuspb.RBACMeta) error); ok {
		r0 = rf(ctx, rbacMeta)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGrpc_RestoreRBAC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestoreRBAC'
type MockGrpc_RestoreRBAC_Call struct {
	*mock.Call
}

// RestoreRBAC is a helper method to define mock.On call
//   - ctx context.Context
//   - rbacMeta *milvuspb.RBACMeta
func (_e *MockGrpc_Expecter) RestoreRBAC(ctx interface{}, rbacMeta interface{}) *MockGrpc_RestoreRBAC_Call {
	return &MockGrpc_RestoreRBAC_Call{Call: _e.mock.On("RestoreRBAC", ctx, rbacMeta)}
}

func (_c *MockGrpc_RestoreRBAC_Call) Run(run func(ctx context.Context, rbacMeta *milvuspb.RBACMeta)) *MockGrpc_RestoreRBAC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*milvuspb.RBACMeta))
	})
	return _c
}

func (_c *MockGrpc_RestoreRBAC_Call) Return(_a0 error) *MockGrpc_RestoreRBAC_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGrpc_RestoreRBAC_Call) RunAndReturn(run func(context.Context, *milvuspb.RBACMeta) error) *MockGrpc_RestoreRBAC_Call {
	_c.Call.Return(run)
	return _c
}

// ShowPartitions provides a mock function with given fields: ctx, db, collName
func (_m *MockGrpc) ShowPartitions(ctx context.Context, db string, collName string) (*milvuspb.ShowPartitionsResponse, error) {
	ret := _m.Called(ctx, db, collName)

	if len(ret) == 0 {
		panic("no return value specified for ShowPartitions")
	}

	var r0 *milvuspb.ShowPartitionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*milvuspb.ShowPartitionsResponse, error)); ok {
		return rf(ctx, db, collName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *milvuspb.ShowPartitionsResponse); ok {
		r0 = rf(ctx, db, collName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*milvuspb.ShowPartitionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, db, collName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGrpc_ShowPartitions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShowPartitions'
type MockGrpc_ShowPartitions_Call struct {
	*mock.Call
}

// ShowPartitions is a helper method to define mock.On call
//   - ctx context.Context
//   - db string
//   - collName string
func (_e *MockGrpc_Expecter) ShowPartitions(ctx interface{}, db interface{}, collName interface{}) *MockGrpc_ShowPartitions_Call {
	return &MockGrpc_ShowPartitions_Call{Call: _e.mock.On("ShowPartitions", ctx, db, collName)}
}

func (_c *MockGrpc_ShowPartitions_Call) Run(run func(ctx context.Context, db string, collName string)) *MockGrpc_ShowPartitions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockGrpc_ShowPartitions_Call) Return(_a0 *milvuspb.ShowPartitionsResponse, _a1 error) *MockGrpc_ShowPartitions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGrpc_ShowPartitions_Call) RunAndReturn(run func(context.Context, string, string) (*milvuspb.ShowPartitionsResponse, error)) *MockGrpc_ShowPartitions_Call {
	_c.Call.Return(run)
	return _c
}

// SupportMultiDatabase provides a mock function with no fields
func (_m *MockGrpc) SupportMultiDatabase() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SupportMultiDatabase")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockGrpc_SupportMultiDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SupportMultiDatabase'
type MockGrpc_SupportMultiDatabase_Call struct {
	*mock.Call
}

// SupportMultiDatabase is a helper method to define mock.On call
func (_e *MockGrpc_Expecter) SupportMultiDatabase() *MockGrpc_SupportMultiDatabase_Call {
	return &MockGrpc_SupportMultiDatabase_Call{Call: _e.mock.On("SupportMultiDatabase")}
}

func (_c *MockGrpc_SupportMultiDatabase_Call) Run(run func()) *MockGrpc_SupportMultiDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGrpc_SupportMultiDatabase_Call) Return(_a0 bool) *MockGrpc_SupportMultiDatabase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGrpc_SupportMultiDatabase_Call) RunAndReturn(run func() bool) *MockGrpc_SupportMultiDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGrpc creates a new instance of MockGrpc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGrpc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGrpc {
	mock := &MockGrpc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
