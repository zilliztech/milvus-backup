// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package client

import (
	"context"

	"github.com/milvus-io/milvus-proto/go-api/v2/milvuspb"
	mock "github.com/stretchr/testify/mock"
)

// NewMockGrpc creates a new instance of MockGrpc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGrpc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGrpc {
	mock := &MockGrpc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockGrpc is an autogenerated mock type for the Grpc type
type MockGrpc struct {
	mock.Mock
}

type MockGrpc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGrpc) EXPECT() *MockGrpc_Expecter {
	return &MockGrpc_Expecter{mock: &_m.Mock}
}

// BackupRBAC provides a mock function for the type MockGrpc
func (_mock *MockGrpc) BackupRBAC(ctx context.Context) (*milvuspb.BackupRBACMetaResponse, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BackupRBAC")
	}

	var r0 *milvuspb.BackupRBACMetaResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*milvuspb.BackupRBACMetaResponse, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *milvuspb.BackupRBACMetaResponse); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*milvuspb.BackupRBACMetaResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGrpc_BackupRBAC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BackupRBAC'
type MockGrpc_BackupRBAC_Call struct {
	*mock.Call
}

// BackupRBAC is a helper method to define mock.On call
//   - ctx
func (_e *MockGrpc_Expecter) BackupRBAC(ctx interface{}) *MockGrpc_BackupRBAC_Call {
	return &MockGrpc_BackupRBAC_Call{Call: _e.mock.On("BackupRBAC", ctx)}
}

func (_c *MockGrpc_BackupRBAC_Call) Run(run func(ctx context.Context)) *MockGrpc_BackupRBAC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockGrpc_BackupRBAC_Call) Return(backupRBACMetaResponse *milvuspb.BackupRBACMetaResponse, err error) *MockGrpc_BackupRBAC_Call {
	_c.Call.Return(backupRBACMetaResponse, err)
	return _c
}

func (_c *MockGrpc_BackupRBAC_Call) RunAndReturn(run func(ctx context.Context) (*milvuspb.BackupRBACMetaResponse, error)) *MockGrpc_BackupRBAC_Call {
	_c.Call.Return(run)
	return _c
}

// BulkInsert provides a mock function for the type MockGrpc
func (_mock *MockGrpc) BulkInsert(ctx context.Context, input GrpcBulkInsertInput) (int64, error) {
	ret := _mock.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for BulkInsert")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, GrpcBulkInsertInput) (int64, error)); ok {
		return returnFunc(ctx, input)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, GrpcBulkInsertInput) int64); ok {
		r0 = returnFunc(ctx, input)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, GrpcBulkInsertInput) error); ok {
		r1 = returnFunc(ctx, input)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGrpc_BulkInsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkInsert'
type MockGrpc_BulkInsert_Call struct {
	*mock.Call
}

// BulkInsert is a helper method to define mock.On call
//   - ctx
//   - input
func (_e *MockGrpc_Expecter) BulkInsert(ctx interface{}, input interface{}) *MockGrpc_BulkInsert_Call {
	return &MockGrpc_BulkInsert_Call{Call: _e.mock.On("BulkInsert", ctx, input)}
}

func (_c *MockGrpc_BulkInsert_Call) Run(run func(ctx context.Context, input GrpcBulkInsertInput)) *MockGrpc_BulkInsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(GrpcBulkInsertInput))
	})
	return _c
}

func (_c *MockGrpc_BulkInsert_Call) Return(n int64, err error) *MockGrpc_BulkInsert_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockGrpc_BulkInsert_Call) RunAndReturn(run func(ctx context.Context, input GrpcBulkInsertInput) (int64, error)) *MockGrpc_BulkInsert_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function for the type MockGrpc
func (_mock *MockGrpc) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGrpc_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockGrpc_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockGrpc_Expecter) Close() *MockGrpc_Close_Call {
	return &MockGrpc_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockGrpc_Close_Call) Run(run func()) *MockGrpc_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGrpc_Close_Call) Return(err error) *MockGrpc_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGrpc_Close_Call) RunAndReturn(run func() error) *MockGrpc_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCollection provides a mock function for the type MockGrpc
func (_mock *MockGrpc) CreateCollection(ctx context.Context, input CreateCollectionInput) error {
	ret := _mock.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateCollection")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateCollectionInput) error); ok {
		r0 = returnFunc(ctx, input)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGrpc_CreateCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCollection'
type MockGrpc_CreateCollection_Call struct {
	*mock.Call
}

// CreateCollection is a helper method to define mock.On call
//   - ctx
//   - input
func (_e *MockGrpc_Expecter) CreateCollection(ctx interface{}, input interface{}) *MockGrpc_CreateCollection_Call {
	return &MockGrpc_CreateCollection_Call{Call: _e.mock.On("CreateCollection", ctx, input)}
}

func (_c *MockGrpc_CreateCollection_Call) Run(run func(ctx context.Context, input CreateCollectionInput)) *MockGrpc_CreateCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CreateCollectionInput))
	})
	return _c
}

func (_c *MockGrpc_CreateCollection_Call) Return(err error) *MockGrpc_CreateCollection_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGrpc_CreateCollection_Call) RunAndReturn(run func(ctx context.Context, input CreateCollectionInput) error) *MockGrpc_CreateCollection_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDatabase provides a mock function for the type MockGrpc
func (_mock *MockGrpc) CreateDatabase(ctx context.Context, dbName string) error {
	ret := _mock.Called(ctx, dbName)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatabase")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, dbName)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGrpc_CreateDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDatabase'
type MockGrpc_CreateDatabase_Call struct {
	*mock.Call
}

// CreateDatabase is a helper method to define mock.On call
//   - ctx
//   - dbName
func (_e *MockGrpc_Expecter) CreateDatabase(ctx interface{}, dbName interface{}) *MockGrpc_CreateDatabase_Call {
	return &MockGrpc_CreateDatabase_Call{Call: _e.mock.On("CreateDatabase", ctx, dbName)}
}

func (_c *MockGrpc_CreateDatabase_Call) Run(run func(ctx context.Context, dbName string)) *MockGrpc_CreateDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockGrpc_CreateDatabase_Call) Return(err error) *MockGrpc_CreateDatabase_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGrpc_CreateDatabase_Call) RunAndReturn(run func(ctx context.Context, dbName string) error) *MockGrpc_CreateDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIndex provides a mock function for the type MockGrpc
func (_mock *MockGrpc) CreateIndex(ctx context.Context, input CreateIndexInput) error {
	ret := _mock.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateIndex")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateIndexInput) error); ok {
		r0 = returnFunc(ctx, input)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGrpc_CreateIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIndex'
type MockGrpc_CreateIndex_Call struct {
	*mock.Call
}

// CreateIndex is a helper method to define mock.On call
//   - ctx
//   - input
func (_e *MockGrpc_Expecter) CreateIndex(ctx interface{}, input interface{}) *MockGrpc_CreateIndex_Call {
	return &MockGrpc_CreateIndex_Call{Call: _e.mock.On("CreateIndex", ctx, input)}
}

func (_c *MockGrpc_CreateIndex_Call) Run(run func(ctx context.Context, input CreateIndexInput)) *MockGrpc_CreateIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CreateIndexInput))
	})
	return _c
}

func (_c *MockGrpc_CreateIndex_Call) Return(err error) *MockGrpc_CreateIndex_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGrpc_CreateIndex_Call) RunAndReturn(run func(ctx context.Context, input CreateIndexInput) error) *MockGrpc_CreateIndex_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePartition provides a mock function for the type MockGrpc
func (_mock *MockGrpc) CreatePartition(ctx context.Context, db string, collName string, partitionName string) error {
	ret := _mock.Called(ctx, db, collName, partitionName)

	if len(ret) == 0 {
		panic("no return value specified for CreatePartition")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = returnFunc(ctx, db, collName, partitionName)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGrpc_CreatePartition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePartition'
type MockGrpc_CreatePartition_Call struct {
	*mock.Call
}

// CreatePartition is a helper method to define mock.On call
//   - ctx
//   - db
//   - collName
//   - partitionName
func (_e *MockGrpc_Expecter) CreatePartition(ctx interface{}, db interface{}, collName interface{}, partitionName interface{}) *MockGrpc_CreatePartition_Call {
	return &MockGrpc_CreatePartition_Call{Call: _e.mock.On("CreatePartition", ctx, db, collName, partitionName)}
}

func (_c *MockGrpc_CreatePartition_Call) Run(run func(ctx context.Context, db string, collName string, partitionName string)) *MockGrpc_CreatePartition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockGrpc_CreatePartition_Call) Return(err error) *MockGrpc_CreatePartition_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGrpc_CreatePartition_Call) RunAndReturn(run func(ctx context.Context, db string, collName string, partitionName string) error) *MockGrpc_CreatePartition_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeCollection provides a mock function for the type MockGrpc
func (_mock *MockGrpc) DescribeCollection(ctx context.Context, db string, collName string) (*milvuspb.DescribeCollectionResponse, error) {
	ret := _mock.Called(ctx, db, collName)

	if len(ret) == 0 {
		panic("no return value specified for DescribeCollection")
	}

	var r0 *milvuspb.DescribeCollectionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*milvuspb.DescribeCollectionResponse, error)); ok {
		return returnFunc(ctx, db, collName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *milvuspb.DescribeCollectionResponse); ok {
		r0 = returnFunc(ctx, db, collName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*milvuspb.DescribeCollectionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, db, collName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGrpc_DescribeCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeCollection'
type MockGrpc_DescribeCollection_Call struct {
	*mock.Call
}

// DescribeCollection is a helper method to define mock.On call
//   - ctx
//   - db
//   - collName
func (_e *MockGrpc_Expecter) DescribeCollection(ctx interface{}, db interface{}, collName interface{}) *MockGrpc_DescribeCollection_Call {
	return &MockGrpc_DescribeCollection_Call{Call: _e.mock.On("DescribeCollection", ctx, db, collName)}
}

func (_c *MockGrpc_DescribeCollection_Call) Run(run func(ctx context.Context, db string, collName string)) *MockGrpc_DescribeCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockGrpc_DescribeCollection_Call) Return(describeCollectionResponse *milvuspb.DescribeCollectionResponse, err error) *MockGrpc_DescribeCollection_Call {
	_c.Call.Return(describeCollectionResponse, err)
	return _c
}

func (_c *MockGrpc_DescribeCollection_Call) RunAndReturn(run func(ctx context.Context, db string, collName string) (*milvuspb.DescribeCollectionResponse, error)) *MockGrpc_DescribeCollection_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeDatabase provides a mock function for the type MockGrpc
func (_mock *MockGrpc) DescribeDatabase(ctx context.Context, dbName string) (*milvuspb.DescribeDatabaseResponse, error) {
	ret := _mock.Called(ctx, dbName)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDatabase")
	}

	var r0 *milvuspb.DescribeDatabaseResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*milvuspb.DescribeDatabaseResponse, error)); ok {
		return returnFunc(ctx, dbName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *milvuspb.DescribeDatabaseResponse); ok {
		r0 = returnFunc(ctx, dbName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*milvuspb.DescribeDatabaseResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, dbName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGrpc_DescribeDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeDatabase'
type MockGrpc_DescribeDatabase_Call struct {
	*mock.Call
}

// DescribeDatabase is a helper method to define mock.On call
//   - ctx
//   - dbName
func (_e *MockGrpc_Expecter) DescribeDatabase(ctx interface{}, dbName interface{}) *MockGrpc_DescribeDatabase_Call {
	return &MockGrpc_DescribeDatabase_Call{Call: _e.mock.On("DescribeDatabase", ctx, dbName)}
}

func (_c *MockGrpc_DescribeDatabase_Call) Run(run func(ctx context.Context, dbName string)) *MockGrpc_DescribeDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockGrpc_DescribeDatabase_Call) Return(describeDatabaseResponse *milvuspb.DescribeDatabaseResponse, err error) *MockGrpc_DescribeDatabase_Call {
	_c.Call.Return(describeDatabaseResponse, err)
	return _c
}

func (_c *MockGrpc_DescribeDatabase_Call) RunAndReturn(run func(ctx context.Context, dbName string) (*milvuspb.DescribeDatabaseResponse, error)) *MockGrpc_DescribeDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// DropCollection provides a mock function for the type MockGrpc
func (_mock *MockGrpc) DropCollection(ctx context.Context, db string, collectionName string) error {
	ret := _mock.Called(ctx, db, collectionName)

	if len(ret) == 0 {
		panic("no return value specified for DropCollection")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, db, collectionName)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGrpc_DropCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropCollection'
type MockGrpc_DropCollection_Call struct {
	*mock.Call
}

// DropCollection is a helper method to define mock.On call
//   - ctx
//   - db
//   - collectionName
func (_e *MockGrpc_Expecter) DropCollection(ctx interface{}, db interface{}, collectionName interface{}) *MockGrpc_DropCollection_Call {
	return &MockGrpc_DropCollection_Call{Call: _e.mock.On("DropCollection", ctx, db, collectionName)}
}

func (_c *MockGrpc_DropCollection_Call) Run(run func(ctx context.Context, db string, collectionName string)) *MockGrpc_DropCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockGrpc_DropCollection_Call) Return(err error) *MockGrpc_DropCollection_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGrpc_DropCollection_Call) RunAndReturn(run func(ctx context.Context, db string, collectionName string) error) *MockGrpc_DropCollection_Call {
	_c.Call.Return(run)
	return _c
}

// DropIndex provides a mock function for the type MockGrpc
func (_mock *MockGrpc) DropIndex(ctx context.Context, db string, collName string, indexName string) error {
	ret := _mock.Called(ctx, db, collName, indexName)

	if len(ret) == 0 {
		panic("no return value specified for DropIndex")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = returnFunc(ctx, db, collName, indexName)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGrpc_DropIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropIndex'
type MockGrpc_DropIndex_Call struct {
	*mock.Call
}

// DropIndex is a helper method to define mock.On call
//   - ctx
//   - db
//   - collName
//   - indexName
func (_e *MockGrpc_Expecter) DropIndex(ctx interface{}, db interface{}, collName interface{}, indexName interface{}) *MockGrpc_DropIndex_Call {
	return &MockGrpc_DropIndex_Call{Call: _e.mock.On("DropIndex", ctx, db, collName, indexName)}
}

func (_c *MockGrpc_DropIndex_Call) Run(run func(ctx context.Context, db string, collName string, indexName string)) *MockGrpc_DropIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockGrpc_DropIndex_Call) Return(err error) *MockGrpc_DropIndex_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGrpc_DropIndex_Call) RunAndReturn(run func(ctx context.Context, db string, collName string, indexName string) error) *MockGrpc_DropIndex_Call {
	_c.Call.Return(run)
	return _c
}

// Flush provides a mock function for the type MockGrpc
func (_mock *MockGrpc) Flush(ctx context.Context, db string, collName string) (*milvuspb.FlushResponse, error) {
	ret := _mock.Called(ctx, db, collName)

	if len(ret) == 0 {
		panic("no return value specified for Flush")
	}

	var r0 *milvuspb.FlushResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*milvuspb.FlushResponse, error)); ok {
		return returnFunc(ctx, db, collName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *milvuspb.FlushResponse); ok {
		r0 = returnFunc(ctx, db, collName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*milvuspb.FlushResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, db, collName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGrpc_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type MockGrpc_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
//   - ctx
//   - db
//   - collName
func (_e *MockGrpc_Expecter) Flush(ctx interface{}, db interface{}, collName interface{}) *MockGrpc_Flush_Call {
	return &MockGrpc_Flush_Call{Call: _e.mock.On("Flush", ctx, db, collName)}
}

func (_c *MockGrpc_Flush_Call) Run(run func(ctx context.Context, db string, collName string)) *MockGrpc_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockGrpc_Flush_Call) Return(flushResponse *milvuspb.FlushResponse, err error) *MockGrpc_Flush_Call {
	_c.Call.Return(flushResponse, err)
	return _c
}

func (_c *MockGrpc_Flush_Call) RunAndReturn(run func(ctx context.Context, db string, collName string) (*milvuspb.FlushResponse, error)) *MockGrpc_Flush_Call {
	_c.Call.Return(run)
	return _c
}

// GetBulkInsertState provides a mock function for the type MockGrpc
func (_mock *MockGrpc) GetBulkInsertState(ctx context.Context, taskID int64) (*milvuspb.GetImportStateResponse, error) {
	ret := _mock.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetBulkInsertState")
	}

	var r0 *milvuspb.GetImportStateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (*milvuspb.GetImportStateResponse, error)); ok {
		return returnFunc(ctx, taskID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) *milvuspb.GetImportStateResponse); ok {
		r0 = returnFunc(ctx, taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*milvuspb.GetImportStateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGrpc_GetBulkInsertState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBulkInsertState'
type MockGrpc_GetBulkInsertState_Call struct {
	*mock.Call
}

// GetBulkInsertState is a helper method to define mock.On call
//   - ctx
//   - taskID
func (_e *MockGrpc_Expecter) GetBulkInsertState(ctx interface{}, taskID interface{}) *MockGrpc_GetBulkInsertState_Call {
	return &MockGrpc_GetBulkInsertState_Call{Call: _e.mock.On("GetBulkInsertState", ctx, taskID)}
}

func (_c *MockGrpc_GetBulkInsertState_Call) Run(run func(ctx context.Context, taskID int64)) *MockGrpc_GetBulkInsertState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockGrpc_GetBulkInsertState_Call) Return(getImportStateResponse *milvuspb.GetImportStateResponse, err error) *MockGrpc_GetBulkInsertState_Call {
	_c.Call.Return(getImportStateResponse, err)
	return _c
}

func (_c *MockGrpc_GetBulkInsertState_Call) RunAndReturn(run func(ctx context.Context, taskID int64) (*milvuspb.GetImportStateResponse, error)) *MockGrpc_GetBulkInsertState_Call {
	_c.Call.Return(run)
	return _c
}

// GetLoadingProgress provides a mock function for the type MockGrpc
func (_mock *MockGrpc) GetLoadingProgress(ctx context.Context, db string, collName string, partitionNames ...string) (int64, error) {
	var tmpRet mock.Arguments
	if len(partitionNames) > 0 {
		tmpRet = _mock.Called(ctx, db, collName, partitionNames)
	} else {
		tmpRet = _mock.Called(ctx, db, collName)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetLoadingProgress")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...string) (int64, error)); ok {
		return returnFunc(ctx, db, collName, partitionNames...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...string) int64); ok {
		r0 = returnFunc(ctx, db, collName, partitionNames...)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...string) error); ok {
		r1 = returnFunc(ctx, db, collName, partitionNames...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGrpc_GetLoadingProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLoadingProgress'
type MockGrpc_GetLoadingProgress_Call struct {
	*mock.Call
}

// GetLoadingProgress is a helper method to define mock.On call
//   - ctx
//   - db
//   - collName
//   - partitionNames
func (_e *MockGrpc_Expecter) GetLoadingProgress(ctx interface{}, db interface{}, collName interface{}, partitionNames ...interface{}) *MockGrpc_GetLoadingProgress_Call {
	return &MockGrpc_GetLoadingProgress_Call{Call: _e.mock.On("GetLoadingProgress",
		append([]interface{}{ctx, db, collName}, partitionNames...)...)}
}

func (_c *MockGrpc_GetLoadingProgress_Call) Run(run func(ctx context.Context, db string, collName string, partitionNames ...string)) *MockGrpc_GetLoadingProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[3].([]string)
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockGrpc_GetLoadingProgress_Call) Return(n int64, err error) *MockGrpc_GetLoadingProgress_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockGrpc_GetLoadingProgress_Call) RunAndReturn(run func(ctx context.Context, db string, collName string, partitionNames ...string) (int64, error)) *MockGrpc_GetLoadingProgress_Call {
	_c.Call.Return(run)
	return _c
}

// GetPersistentSegmentInfo provides a mock function for the type MockGrpc
func (_mock *MockGrpc) GetPersistentSegmentInfo(ctx context.Context, db string, collName string) ([]*milvuspb.PersistentSegmentInfo, error) {
	ret := _mock.Called(ctx, db, collName)

	if len(ret) == 0 {
		panic("no return value specified for GetPersistentSegmentInfo")
	}

	var r0 []*milvuspb.PersistentSegmentInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) ([]*milvuspb.PersistentSegmentInfo, error)); ok {
		return returnFunc(ctx, db, collName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) []*milvuspb.PersistentSegmentInfo); ok {
		r0 = returnFunc(ctx, db, collName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*milvuspb.PersistentSegmentInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, db, collName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGrpc_GetPersistentSegmentInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPersistentSegmentInfo'
type MockGrpc_GetPersistentSegmentInfo_Call struct {
	*mock.Call
}

// GetPersistentSegmentInfo is a helper method to define mock.On call
//   - ctx
//   - db
//   - collName
func (_e *MockGrpc_Expecter) GetPersistentSegmentInfo(ctx interface{}, db interface{}, collName interface{}) *MockGrpc_GetPersistentSegmentInfo_Call {
	return &MockGrpc_GetPersistentSegmentInfo_Call{Call: _e.mock.On("GetPersistentSegmentInfo", ctx, db, collName)}
}

func (_c *MockGrpc_GetPersistentSegmentInfo_Call) Run(run func(ctx context.Context, db string, collName string)) *MockGrpc_GetPersistentSegmentInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockGrpc_GetPersistentSegmentInfo_Call) Return(persistentSegmentInfos []*milvuspb.PersistentSegmentInfo, err error) *MockGrpc_GetPersistentSegmentInfo_Call {
	_c.Call.Return(persistentSegmentInfos, err)
	return _c
}

func (_c *MockGrpc_GetPersistentSegmentInfo_Call) RunAndReturn(run func(ctx context.Context, db string, collName string) ([]*milvuspb.PersistentSegmentInfo, error)) *MockGrpc_GetPersistentSegmentInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetVersion provides a mock function for the type MockGrpc
func (_mock *MockGrpc) GetVersion(ctx context.Context) (string, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetVersion")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGrpc_GetVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersion'
type MockGrpc_GetVersion_Call struct {
	*mock.Call
}

// GetVersion is a helper method to define mock.On call
//   - ctx
func (_e *MockGrpc_Expecter) GetVersion(ctx interface{}) *MockGrpc_GetVersion_Call {
	return &MockGrpc_GetVersion_Call{Call: _e.mock.On("GetVersion", ctx)}
}

func (_c *MockGrpc_GetVersion_Call) Run(run func(ctx context.Context)) *MockGrpc_GetVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockGrpc_GetVersion_Call) Return(s string, err error) *MockGrpc_GetVersion_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockGrpc_GetVersion_Call) RunAndReturn(run func(ctx context.Context) (string, error)) *MockGrpc_GetVersion_Call {
	_c.Call.Return(run)
	return _c
}

// HasCollection provides a mock function for the type MockGrpc
func (_mock *MockGrpc) HasCollection(ctx context.Context, db string, collName string) (bool, error) {
	ret := _mock.Called(ctx, db, collName)

	if len(ret) == 0 {
		panic("no return value specified for HasCollection")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return returnFunc(ctx, db, collName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = returnFunc(ctx, db, collName)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, db, collName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGrpc_HasCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasCollection'
type MockGrpc_HasCollection_Call struct {
	*mock.Call
}

// HasCollection is a helper method to define mock.On call
//   - ctx
//   - db
//   - collName
func (_e *MockGrpc_Expecter) HasCollection(ctx interface{}, db interface{}, collName interface{}) *MockGrpc_HasCollection_Call {
	return &MockGrpc_HasCollection_Call{Call: _e.mock.On("HasCollection", ctx, db, collName)}
}

func (_c *MockGrpc_HasCollection_Call) Run(run func(ctx context.Context, db string, collName string)) *MockGrpc_HasCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockGrpc_HasCollection_Call) Return(b bool, err error) *MockGrpc_HasCollection_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockGrpc_HasCollection_Call) RunAndReturn(run func(ctx context.Context, db string, collName string) (bool, error)) *MockGrpc_HasCollection_Call {
	_c.Call.Return(run)
	return _c
}

// HasFeature provides a mock function for the type MockGrpc
func (_mock *MockGrpc) HasFeature(flag FeatureFlag) bool {
	ret := _mock.Called(flag)

	if len(ret) == 0 {
		panic("no return value specified for HasFeature")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(FeatureFlag) bool); ok {
		r0 = returnFunc(flag)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockGrpc_HasFeature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasFeature'
type MockGrpc_HasFeature_Call struct {
	*mock.Call
}

// HasFeature is a helper method to define mock.On call
//   - flag
func (_e *MockGrpc_Expecter) HasFeature(flag interface{}) *MockGrpc_HasFeature_Call {
	return &MockGrpc_HasFeature_Call{Call: _e.mock.On("HasFeature", flag)}
}

func (_c *MockGrpc_HasFeature_Call) Run(run func(flag FeatureFlag)) *MockGrpc_HasFeature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(FeatureFlag))
	})
	return _c
}

func (_c *MockGrpc_HasFeature_Call) Return(b bool) *MockGrpc_HasFeature_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockGrpc_HasFeature_Call) RunAndReturn(run func(flag FeatureFlag) bool) *MockGrpc_HasFeature_Call {
	_c.Call.Return(run)
	return _c
}

// HasPartition provides a mock function for the type MockGrpc
func (_mock *MockGrpc) HasPartition(ctx context.Context, db string, collName string, partitionName string) (bool, error) {
	ret := _mock.Called(ctx, db, collName, partitionName)

	if len(ret) == 0 {
		panic("no return value specified for HasPartition")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (bool, error)); ok {
		return returnFunc(ctx, db, collName, partitionName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = returnFunc(ctx, db, collName, partitionName)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = returnFunc(ctx, db, collName, partitionName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGrpc_HasPartition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasPartition'
type MockGrpc_HasPartition_Call struct {
	*mock.Call
}

// HasPartition is a helper method to define mock.On call
//   - ctx
//   - db
//   - collName
//   - partitionName
func (_e *MockGrpc_Expecter) HasPartition(ctx interface{}, db interface{}, collName interface{}, partitionName interface{}) *MockGrpc_HasPartition_Call {
	return &MockGrpc_HasPartition_Call{Call: _e.mock.On("HasPartition", ctx, db, collName, partitionName)}
}

func (_c *MockGrpc_HasPartition_Call) Run(run func(ctx context.Context, db string, collName string, partitionName string)) *MockGrpc_HasPartition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockGrpc_HasPartition_Call) Return(b bool, err error) *MockGrpc_HasPartition_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockGrpc_HasPartition_Call) RunAndReturn(run func(ctx context.Context, db string, collName string, partitionName string) (bool, error)) *MockGrpc_HasPartition_Call {
	_c.Call.Return(run)
	return _c
}

// ListCollections provides a mock function for the type MockGrpc
func (_mock *MockGrpc) ListCollections(ctx context.Context, db string) (*milvuspb.ShowCollectionsResponse, error) {
	ret := _mock.Called(ctx, db)

	if len(ret) == 0 {
		panic("no return value specified for ListCollections")
	}

	var r0 *milvuspb.ShowCollectionsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*milvuspb.ShowCollectionsResponse, error)); ok {
		return returnFunc(ctx, db)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *milvuspb.ShowCollectionsResponse); ok {
		r0 = returnFunc(ctx, db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*milvuspb.ShowCollectionsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, db)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGrpc_ListCollections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCollections'
type MockGrpc_ListCollections_Call struct {
	*mock.Call
}

// ListCollections is a helper method to define mock.On call
//   - ctx
//   - db
func (_e *MockGrpc_Expecter) ListCollections(ctx interface{}, db interface{}) *MockGrpc_ListCollections_Call {
	return &MockGrpc_ListCollections_Call{Call: _e.mock.On("ListCollections", ctx, db)}
}

func (_c *MockGrpc_ListCollections_Call) Run(run func(ctx context.Context, db string)) *MockGrpc_ListCollections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockGrpc_ListCollections_Call) Return(showCollectionsResponse *milvuspb.ShowCollectionsResponse, err error) *MockGrpc_ListCollections_Call {
	_c.Call.Return(showCollectionsResponse, err)
	return _c
}

func (_c *MockGrpc_ListCollections_Call) RunAndReturn(run func(ctx context.Context, db string) (*milvuspb.ShowCollectionsResponse, error)) *MockGrpc_ListCollections_Call {
	_c.Call.Return(run)
	return _c
}

// ListDatabases provides a mock function for the type MockGrpc
func (_mock *MockGrpc) ListDatabases(ctx context.Context) ([]string, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListDatabases")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGrpc_ListDatabases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDatabases'
type MockGrpc_ListDatabases_Call struct {
	*mock.Call
}

// ListDatabases is a helper method to define mock.On call
//   - ctx
func (_e *MockGrpc_Expecter) ListDatabases(ctx interface{}) *MockGrpc_ListDatabases_Call {
	return &MockGrpc_ListDatabases_Call{Call: _e.mock.On("ListDatabases", ctx)}
}

func (_c *MockGrpc_ListDatabases_Call) Run(run func(ctx context.Context)) *MockGrpc_ListDatabases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockGrpc_ListDatabases_Call) Return(strings []string, err error) *MockGrpc_ListDatabases_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockGrpc_ListDatabases_Call) RunAndReturn(run func(ctx context.Context) ([]string, error)) *MockGrpc_ListDatabases_Call {
	_c.Call.Return(run)
	return _c
}

// ListIndex provides a mock function for the type MockGrpc
func (_mock *MockGrpc) ListIndex(ctx context.Context, db string, collName string) ([]*milvuspb.IndexDescription, error) {
	ret := _mock.Called(ctx, db, collName)

	if len(ret) == 0 {
		panic("no return value specified for ListIndex")
	}

	var r0 []*milvuspb.IndexDescription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) ([]*milvuspb.IndexDescription, error)); ok {
		return returnFunc(ctx, db, collName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) []*milvuspb.IndexDescription); ok {
		r0 = returnFunc(ctx, db, collName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*milvuspb.IndexDescription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, db, collName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGrpc_ListIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIndex'
type MockGrpc_ListIndex_Call struct {
	*mock.Call
}

// ListIndex is a helper method to define mock.On call
//   - ctx
//   - db
//   - collName
func (_e *MockGrpc_Expecter) ListIndex(ctx interface{}, db interface{}, collName interface{}) *MockGrpc_ListIndex_Call {
	return &MockGrpc_ListIndex_Call{Call: _e.mock.On("ListIndex", ctx, db, collName)}
}

func (_c *MockGrpc_ListIndex_Call) Run(run func(ctx context.Context, db string, collName string)) *MockGrpc_ListIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockGrpc_ListIndex_Call) Return(indexDescriptions []*milvuspb.IndexDescription, err error) *MockGrpc_ListIndex_Call {
	_c.Call.Return(indexDescriptions, err)
	return _c
}

func (_c *MockGrpc_ListIndex_Call) RunAndReturn(run func(ctx context.Context, db string, collName string) ([]*milvuspb.IndexDescription, error)) *MockGrpc_ListIndex_Call {
	_c.Call.Return(run)
	return _c
}

// ReplicateMessage provides a mock function for the type MockGrpc
func (_mock *MockGrpc) ReplicateMessage(ctx context.Context, channelName string) (string, error) {
	ret := _mock.Called(ctx, channelName)

	if len(ret) == 0 {
		panic("no return value specified for ReplicateMessage")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, channelName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, channelName)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, channelName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGrpc_ReplicateMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplicateMessage'
type MockGrpc_ReplicateMessage_Call struct {
	*mock.Call
}

// ReplicateMessage is a helper method to define mock.On call
//   - ctx
//   - channelName
func (_e *MockGrpc_Expecter) ReplicateMessage(ctx interface{}, channelName interface{}) *MockGrpc_ReplicateMessage_Call {
	return &MockGrpc_ReplicateMessage_Call{Call: _e.mock.On("ReplicateMessage", ctx, channelName)}
}

func (_c *MockGrpc_ReplicateMessage_Call) Run(run func(ctx context.Context, channelName string)) *MockGrpc_ReplicateMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockGrpc_ReplicateMessage_Call) Return(s string, err error) *MockGrpc_ReplicateMessage_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockGrpc_ReplicateMessage_Call) RunAndReturn(run func(ctx context.Context, channelName string) (string, error)) *MockGrpc_ReplicateMessage_Call {
	_c.Call.Return(run)
	return _c
}

// RestoreRBAC provides a mock function for the type MockGrpc
func (_mock *MockGrpc) RestoreRBAC(ctx context.Context, rbacMeta *milvuspb.RBACMeta) error {
	ret := _mock.Called(ctx, rbacMeta)

	if len(ret) == 0 {
		panic("no return value specified for RestoreRBAC")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *milvuspb.RBACMeta) error); ok {
		r0 = returnFunc(ctx, rbacMeta)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockGrpc_RestoreRBAC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestoreRBAC'
type MockGrpc_RestoreRBAC_Call struct {
	*mock.Call
}

// RestoreRBAC is a helper method to define mock.On call
//   - ctx
//   - rbacMeta
func (_e *MockGrpc_Expecter) RestoreRBAC(ctx interface{}, rbacMeta interface{}) *MockGrpc_RestoreRBAC_Call {
	return &MockGrpc_RestoreRBAC_Call{Call: _e.mock.On("RestoreRBAC", ctx, rbacMeta)}
}

func (_c *MockGrpc_RestoreRBAC_Call) Run(run func(ctx context.Context, rbacMeta *milvuspb.RBACMeta)) *MockGrpc_RestoreRBAC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*milvuspb.RBACMeta))
	})
	return _c
}

func (_c *MockGrpc_RestoreRBAC_Call) Return(err error) *MockGrpc_RestoreRBAC_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGrpc_RestoreRBAC_Call) RunAndReturn(run func(ctx context.Context, rbacMeta *milvuspb.RBACMeta) error) *MockGrpc_RestoreRBAC_Call {
	_c.Call.Return(run)
	return _c
}

// ShowPartitions provides a mock function for the type MockGrpc
func (_mock *MockGrpc) ShowPartitions(ctx context.Context, db string, collName string) (*milvuspb.ShowPartitionsResponse, error) {
	ret := _mock.Called(ctx, db, collName)

	if len(ret) == 0 {
		panic("no return value specified for ShowPartitions")
	}

	var r0 *milvuspb.ShowPartitionsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*milvuspb.ShowPartitionsResponse, error)); ok {
		return returnFunc(ctx, db, collName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *milvuspb.ShowPartitionsResponse); ok {
		r0 = returnFunc(ctx, db, collName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*milvuspb.ShowPartitionsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, db, collName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockGrpc_ShowPartitions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShowPartitions'
type MockGrpc_ShowPartitions_Call struct {
	*mock.Call
}

// ShowPartitions is a helper method to define mock.On call
//   - ctx
//   - db
//   - collName
func (_e *MockGrpc_Expecter) ShowPartitions(ctx interface{}, db interface{}, collName interface{}) *MockGrpc_ShowPartitions_Call {
	return &MockGrpc_ShowPartitions_Call{Call: _e.mock.On("ShowPartitions", ctx, db, collName)}
}

func (_c *MockGrpc_ShowPartitions_Call) Run(run func(ctx context.Context, db string, collName string)) *MockGrpc_ShowPartitions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockGrpc_ShowPartitions_Call) Return(showPartitionsResponse *milvuspb.ShowPartitionsResponse, err error) *MockGrpc_ShowPartitions_Call {
	_c.Call.Return(showPartitionsResponse, err)
	return _c
}

func (_c *MockGrpc_ShowPartitions_Call) RunAndReturn(run func(ctx context.Context, db string, collName string) (*milvuspb.ShowPartitionsResponse, error)) *MockGrpc_ShowPartitions_Call {
	_c.Call.Return(run)
	return _c
}
