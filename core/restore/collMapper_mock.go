// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package restore

import (
	mock "github.com/stretchr/testify/mock"

	"github.com/zilliztech/milvus-backup/core/namespace"
)

// newMockcollMapper creates a new instance of mockcollMapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockcollMapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockcollMapper {
	mock := &mockcollMapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// mockcollMapper is an autogenerated mock type for the collMapper type
type mockcollMapper struct {
	mock.Mock
}

type mockcollMapper_Expecter struct {
	mock *mock.Mock
}

func (_m *mockcollMapper) EXPECT() *mockcollMapper_Expecter {
	return &mockcollMapper_Expecter{mock: &_m.Mock}
}

// tagetNS provides a mock function for the type mockcollMapper
func (_mock *mockcollMapper) tagetNS(ns namespace.NS) []namespace.NS {
	ret := _mock.Called(ns)

	if len(ret) == 0 {
		panic("no return value specified for tagetNS")
	}

	var r0 []namespace.NS
	if returnFunc, ok := ret.Get(0).(func(namespace.NS) []namespace.NS); ok {
		r0 = returnFunc(ns)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]namespace.NS)
		}
	}
	return r0
}

// mockcollMapper_tagetNS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'tagetNS'
type mockcollMapper_tagetNS_Call struct {
	*mock.Call
}

// tagetNS is a helper method to define mock.On call
//   - ns namespace.NS
func (_e *mockcollMapper_Expecter) tagetNS(ns interface{}) *mockcollMapper_tagetNS_Call {
	return &mockcollMapper_tagetNS_Call{Call: _e.mock.On("tagetNS", ns)}
}

func (_c *mockcollMapper_tagetNS_Call) Run(run func(ns namespace.NS)) *mockcollMapper_tagetNS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 namespace.NS
		if args[0] != nil {
			arg0 = args[0].(namespace.NS)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *mockcollMapper_tagetNS_Call) Return(nSs []namespace.NS) *mockcollMapper_tagetNS_Call {
	_c.Call.Return(nSs)
	return _c
}

func (_c *mockcollMapper_tagetNS_Call) RunAndReturn(run func(ns namespace.NS) []namespace.NS) *mockcollMapper_tagetNS_Call {
	_c.Call.Return(run)
	return _c
}
