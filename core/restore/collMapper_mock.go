// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package restore

import (
	mock "github.com/stretchr/testify/mock"

	"github.com/zilliztech/milvus-backup/internal/namespace"
)

// NewMockCollMapper creates a new instance of MockCollMapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCollMapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCollMapper {
	mock := &MockCollMapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCollMapper is an autogenerated mock type for the CollMapper type
type MockCollMapper struct {
	mock.Mock
}

type MockCollMapper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCollMapper) EXPECT() *MockCollMapper_Expecter {
	return &MockCollMapper_Expecter{mock: &_m.Mock}
}

// TagetNS provides a mock function for the type MockCollMapper
func (_mock *MockCollMapper) TagetNS(ns namespace.NS) []namespace.NS {
	ret := _mock.Called(ns)

	if len(ret) == 0 {
		panic("no return value specified for TagetNS")
	}

	var r0 []namespace.NS
	if returnFunc, ok := ret.Get(0).(func(namespace.NS) []namespace.NS); ok {
		r0 = returnFunc(ns)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]namespace.NS)
		}
	}
	return r0
}

// MockCollMapper_TagetNS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagetNS'
type MockCollMapper_TagetNS_Call struct {
	*mock.Call
}

// TagetNS is a helper method to define mock.On call
//   - ns namespace.NS
func (_e *MockCollMapper_Expecter) TagetNS(ns interface{}) *MockCollMapper_TagetNS_Call {
	return &MockCollMapper_TagetNS_Call{Call: _e.mock.On("TagetNS", ns)}
}

func (_c *MockCollMapper_TagetNS_Call) Run(run func(ns namespace.NS)) *MockCollMapper_TagetNS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 namespace.NS
		if args[0] != nil {
			arg0 = args[0].(namespace.NS)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCollMapper_TagetNS_Call) Return(nSs []namespace.NS) *MockCollMapper_TagetNS_Call {
	_c.Call.Return(nSs)
	return _c
}

func (_c *MockCollMapper_TagetNS_Call) RunAndReturn(run func(ns namespace.NS) []namespace.NS) *MockCollMapper_TagetNS_Call {
	_c.Call.Return(run)
	return _c
}
